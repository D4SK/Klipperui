#:kivy 1.8.0
#:import Factory kivy.factory.Factory
#:import screenmanager kivy.uix.screenmanager
#:import p parameters
#:import basename os.path.basename
#:import splitext os.path.splitext
# note that this requires the kgui folder to be in PYTHONPATH or sys.path, unless the 
# interpreter is started in this folder because the import is happening in kivy/lang/parser.py 


FloatLayout:
    StatusBar:
        height: p.status_bar_height
        size_hint: 1, None
        top: root.top
    MainTabs:
        id: tabs
        height: root.height - p.status_bar_height
        size_hint_y: None

<StatusBar@BoxLayout>:
    canvas:
        Color:
            rgba: p.red if 'error' in app.state else p.accent if app.state == 'ready' else p.nozzle
        Rectangle:
            size: self.size
            pos: self.pos
    orientation: 'horizontal'
    StackLayout:
        id: left
        orientation: 'lr-tb'
        width: self.minimum_width
        x: root.x
        Label:
            id: state
            text: "state: " + app.state + ", " + app.print_state
            size_hint_x: None
            size: self.texture_size
            font_size: root.height - 5
            padding: 7, 0
    StackLayout:
        id: right
        orientation: 'rl-tb'
        width: self.minimum_width
        right: root.right
        ConnectionIcon:
            id: con
            size_hint: None, None
            size: 0, root.height
            topright: root.right, root.top
        TimeLabel:
            id: time
            text: self.time
            size_hint_x: None
            size: self.texture_size
            font_size: root.height - 4
            padding: 7, 0

<MainTabs@TabbedPanel>:
    tab_pos: 'bottom_mid'
    tab_width: p.screen_width/3
    tab_height: p.tab_height
    do_default_tab: False
    HomeTab:
        id: home_tab
    FileTab:
        id: file_tab
    SettingTab:
        id: set_tab

# HOME ########################################################################

<HomeTab@TabbedPanelItem>:
    background_down: '' # dadurch nimmt es background color an, sowieso immer mit dessen opacity auch waere es ein bild
    background_normal: p.kgui_dir+'/Logos/Black.png'
    background_color: p.background
    canvas:
        Rectangle:
            source: p.kgui_dir+'/Logos/HomeIcon.png'
            size: 100, 100
            pos: 50, 0
    FloatLayout:
        Background:
            pos_hint: {'x':0,'y':0}
            size_hint: 1,1
        ProgressBar:
            enabled: app.print_state != 'no_printjob'
            id: progress_bar
            max: 1
            value: app.progress
            size_hint: None, None
            size: p.screen_width-2*p.h_padding+2, p.progress_bar_height
            pos: p.h_padding-1, p.tab_height + p.padding
        Label:
            text: app.print_time
            size_hint: None, None
            size: p.screen_width-2*p.padding, p.normal_font
            text_size: self.size
            font_size: p.normal_font
            x: p.h_padding - 2
            top: progress_bar.y - 8
            halign: 'left'
            valign: 'bottom'
        Label:
            text: app.print_done_time
            size_hint: None, None
            size: p.screen_width-2*p.padding, p.normal_font
            text_size: self.size
            font_size: p.normal_font
            x: p.h_padding - 2
            top: progress_bar.y - 8
            color: p.btn_disabled
            halign: 'right'
            valign: 'bottom'
        Btn_Stop:
            on_release: app.send_stop()
            id: btn_stop
            size: 118,118
            center_y: progress_bar.top + p.padding + p.btn_height/2
            center_x: p.screen_width - p.btn_height/2 - p.h_padding
        Btn_Reprint:
            on_release: app.send_start()
            size: 118, 118
            pos: btn_stop.pos
        Btn_Play:
            on_release:
                if self.paused: app.send_start()
                else:           app.send_pause()
            size: btn_stop.size
            y: btn_stop.y
            right: btn_stop.x
        Label:
            id: l_filename
            text: splitext(basename(app.queued_files[0]))[0] if app.queued_files else ""
            size_hint: None, None
            size: 280,134
            text_size: self.size
            font_size: p.large_font
            x: p.h_padding-3
            center_y: btn_stop.center_y
            shorten: True
            halign: 'left'
            valign: 'middle'
        ScreenManager:
            current: 'printingscreen' if app.print_state == 'printing' else 'homescreen'
            transition: screenmanager.NoTransition()
            id: hs_manager
            size_hint: None, None
            size: p.screen_width, p.screen_height-btn_stop.center_y-p.btn_height/2
            pos: root.x, btn_stop.center_y+p.btn_height/2
            HomeScreen:
            PrintingScreen:
        Btn_Temp:
            id: temp_T1
            heater_id: "T1"
            on_release: Factory.ExtTempPopup(creator=self, val=app.temp).open()
            large_value: "{:3.0f}°C".format(app.temp[self.heater_id][1])
            small_value: "{:3.0f}".format(app.temp[self.heater_id][0]) if app.temp[self.heater_id][0] != 0 else "Off"
            red: app.temp[self.heater_id][1] > 50
            width: 80
            right: temp_bed.right if app.extruder_count > 1 else p.mars
            y: p.tab_height + p.padding*2 + p.progress_bar_height + p.btn_spacing
        Btn_Extruder:
            heater_id: 'T1'
            x: p.h_padding if app.extruder_count > 1 else p.mars
            y: p.tab_height + p.padding*2 + p.progress_bar_height + p.btn_spacing
        Btn_Temp:
            id: temp_T0
            heater_id: "T0"
            on_release: Factory.ExtTempPopup(creator=self, val=app.temp).open()
            large_value: "{:3.0f}°C".format(app.temp[self.heater_id][1])
            small_value: "{:3.0f}".format(app.temp[self.heater_id][0]) if app.temp[self.heater_id][0] != 0 else "Off"
            red: app.temp[self.heater_id][1] > 50
            width: 80
            right: temp_bed.right
            y: p.tab_height + p.progress_bar_height + 4*p.padding + 2*p.btn_height
        Btn_Extruder:
            heater_id: 'T0'
            x: p.h_padding
            y: p.tab_height + p.padding*2 + p.progress_bar_height + 2*p.btn_spacing
        Btn_Temp:
            on_release: Factory.BedTempPopup(creator=self, val=app.temp).open()
            id: temp_bed
            large_value: "{:3.0f}°C".format(app.temp['B'][1])
            small_value: "{:3.0f}".format(app.temp['B'][0]) if app.temp['B'][0] != 0 else "Off"
            red: app.temp['B'][1] > 50
            x: p.h_padding
            y: p.tab_height + p.progress_bar_height + 5*p.padding + 3*p.btn_height
            canvas.before:
                Color:
                    rgba: p.nozzle
                #:set bw 78
                #:set bx1 -19
                #:set bx2 +19
                #:set bh 40
                #:set bo 16
                #:set icon_center 26
                Line:
                    width: p.icon_radius
                    points: self.x + icon_center - bw/2, self.center_y - p.btn_height/2 + p.icon_radius,   self.x + icon_center + bw/2, self.center_y - p.btn_height/2 + p.icon_radius
                Line:
                    width: p.icon_radius - 0.5
                    bezier: self.x + icon_center + bx1, self.center_y + p.btn_height/2 - p.icon_radius,   self.x + icon_center + bx1 - bo, self.center_y + p.btn_height/2 - bh*0.35 - p.icon_radius,   self.x + icon_center + bx1 + bo, self.center_y + p.btn_height/2 - bh*0.65 - p.icon_radius,   self.x + icon_center + bx1, self.center_y + p.btn_height/2 - bh - p.icon_radius
                Line:
                    width: p.icon_radius - 0.5
                    bezier: self.x + icon_center + bx2, self.center_y + p.btn_height/2 - p.icon_radius,   self.x + icon_center + bx2 - bo, self.center_y + p.btn_height/2 - bh*0.35 - p.icon_radius,   self.x + icon_center + bx2 + bo, self.center_y + p.btn_height/2 - bh*0.65 - p.icon_radius,   self.x + icon_center + bx2, self.center_y + p.btn_height/2 - bh - p.icon_radius
                Line:
                    width: p.icon_radius - 0.5
                    bezier: self.x + icon_center, self.center_y + p.btn_height/2 - p.icon_radius,   self.x + icon_center - bo, self.center_y + p.btn_height/2 - bh*0.35 - p.icon_radius,   self.x + icon_center  + bo, self.center_y + p.btn_height/2 - bh*0.65 - p.icon_radius,   self.x + icon_center, self.center_y + p.btn_height/2 - bh - p.icon_radius


<Btn_Extruder@BaseButton>:
    #:set esh 17
    size: icon_center*2, p.btn_height
    heater_id: 'T0'
    selected: False
    canvas:
        Color:
            rgba: p.nozzle_selected if self.selected else p.nozzle
        Rectangle:
            size: self.width - 2*p.icon_radius, self.height - esh - p.icon_radius
            pos: self.x + p.icon_radius, self.y + esh
        Triangle:
            points: self.x + p.icon_radius, self.y + esh,   self.center_x, self.y,   self.right - p.icon_radius, self.y + esh
        Line:
            width: p.icon_radius
            points: self.x + p.icon_radius, self.y + esh,   self.center_x, self.y,   self.right - p.icon_radius, self.y + esh,   self.right - p.icon_radius, self.top - p.icon_radius,   self.x + p.icon_radius, self.top - p.icon_radius
            close: True
    Label:
        text: root.heater_id
        bold: True
        color: p.background
        center_x: root.center_x
        center_y: root.center_y + 2      
        font_size: p.large_font

<PrintingScreen@Screen>:
    name: "printingscreen"
    FloatLayout:

        Btn_Temp:
            id: fan
            on_release: Factory.FanPopup(val=app.fan_speed).open()
            large_value: "{:3.0f}%".format(app.fan_speed)
            small_value: "Print Cooling"
            right: p.screen_width - p.h_padding
            center_y: p.padding + p.btn_height/2 + p.btn_spacing
        Btn_Temp:
            id: z_adjust
            on_release: Factory.ZAdjustPopup(val=app.z_adjust).open()
            large_value: "{:3.2f}mm".format(app.z_adjust)
            small_value: "Z Calibration"
            right: p.screen_width - p.h_padding
            center_y: fan.center_y + p.btn_spacing
        Btn_Temp:
            id: pressure_advance
            on_release: Factory.PressureAdvancePopup(val=app.pressure_advance).open()
            large_value: "{:4.3f}s".format(app.pressure_advance)
            small_value: "Pressure Advance"
            right: p.screen_width - p.h_padding
            center_y: z_adjust.center_y + p.btn_spacing
        Btn_Temp:
            id: acceleration
            on_release: Factory.AccPopup(val=app.acceleration).open()
            large_value: "{:5.0f}mm/s²".format(app.acceleration)
            small_value: "Acceleration"
            right: p.screen_width - p.h_padding
            center_y: pressure_advance.center_y + p.btn_spacing
        Btn_Temp:
            id: speed
            on_release: Factory.SpeedPopup(val=app.speed).open()
            large_value: "{:3.0f}%".format(app.speed)
            small_value: "Print Speed"
            x: p.h_padding
            center_y: acceleration.center_y
        Btn_Temp:
            id: flow
            on_release: Factory.FlowPopup(val=app.flow).open()
            large_value: "{:3.0f}%".format(app.flow)
            small_value: "Material Flow"
            x: p.h_padding
            center_y: pressure_advance.center_y

<HomeScreen@Screen>:
    name: "homescreen"
    FloatLayout:
        BtnTriple:
            w1: p.btn_height
            w2: p.btn_width - 2*p.btn_height
            w3: p.btn_height
            id: btn_tr_T1
            y: p.padding if app.extruder_count > 1 else p.mars
            right: p.screen_width - p.h_padding
        BtnTriple:
            w1: p.btn_height
            w2: p.btn_width - 2*p.btn_height
            w3: p.btn_height
            id: btn_tr_T0
            y: p.padding*2 + p.btn_height
            right: p.screen_width - p.h_padding
        Btn_Outline:
            id: btn_calibrate
            on_release: app.send_calibrate()
            enabled: app.printer_objects_available
            title: "Mesh Bed Leveling"
            size: btn_tr_T1.size
            pos: btn_tr_T0.x, 3*p.padding+2*p.btn_height
        BtnTripleZ:
            id: btn_tr_Z
            height: xy_field.height
            h1: self.height/3
            h2: self.height/3
            h3: self.height/3
            width: p.btn_height*p.disp_vertical_stretch
            right: root.right- p.h_padding
            top: root.height-p.padding-p.status_bar_height
        XyField:
            id: xy_field
            size_hint: None, None
            height: p.btn_height*3
            width: self.height + 40
            x: p.h_padding
            top: root.height-p.padding-p.status_bar_height
            enabled: app.printer_objects_available and app.homed['x'] and app.homed['y']
        Btn_Home:
            axis_id: 'X'
            size: p.btn_height, p.btn_height
            x: xy_field.right if app.xy_homing_controls else p.mars
            y: xy_field.y
        Btn_Home:
            axis_id: 'Y'
            size: p.btn_height, p.btn_height
            x: xy_field.right if app.xy_homing_controls else p.mars
            y: xy_field.y + p.btn_height
        RoundButton:
            id: btn_off
            on_release: app.send_motors_off()
            enabled: app.printer_objects_available
            size: p.btn_height, p.btn_height
            x: xy_field.right if app.xy_homing_controls else p.mars
            top: xy_field.top
            Label:
                text: "Off"
                color: (1,1,1,1) if btn_off.enabled else p.btn_disabled
                size: btn_off.size
                text_size: self.size
                font_size: p.large_font
                pos: btn_off.pos
                halign: 'center'
                valign: 'middle'

# BUTTONS  ########################################################################

<BaseButton>:
    title: ''
    size_hint: None, None
    Label:
        text: root.title
        size: root.size
        color: (1,1,1,1) if root.enabled else p.btn_disabled
        text_size: self.size
        pos: root.pos        
        font_size: p.normal_font
        valign: 'middle'
        halign: 'center'

<RoundButton@BaseButton>:
    canvas.after:
        Color:
            rgba: p.translucent_white if self.pressed and self.enabled else (0,0,0,0)
        RoundedRectangle:
            radius: (p.radius,)
            size: self.size
            pos: self.pos

<RectangleButton>:
    canvas:
        Color:
            rgba: p.translucent_white if self.pressed and self.enabled else (0,0,0,0)
        Rectangle:
            size: self.size
            pos: self.pos

<Btn_Stop@RoundButton>:
    enabled: app.print_state == 'printing' or app.print_state == 'paused'
    canvas.before:
        Color:
            rgba: p.red if self.enabled else (0,0,0,0)
        RoundedRectangle:
            pos: self.center_x-p.btn_height/2,self.center_y-p.btn_height/2
            size: p.btn_height,p.btn_height
            radius: (p.icon_radius,)

<Btn_Reprint@RoundButton>:
    enabled: app.print_state == 'done' or app.print_state == 'stopped'
    canvas.before:
        Color:
            rgba: p.nozzle if self.enabled else (0,0,0,0)
        Line:
            #:set rw p.progress_bar_height/2 -0.3
            #:set r_arr 17
            #:set r_rad 23
            width: rw
            ellipse: (self.center_x - r_rad*p.disp_vertical_stretch, self.center_y - r_rad + 1, r_rad*2*p.disp_vertical_stretch, r_rad*2, 0, 270)
        Triangle:
            points: (self.center_x - r_arr, self.center_y + r_rad,    self.center_x, self.center_y + r_rad + r_arr,    self.center_x, self.center_y + r_rad - r_arr)

<Btn_Play@RoundButton>:
    #:set pw (p.btn_height-2*p.icon_radius)/2
    #:set ph pw*1.155
    paused: app.print_state == 'paused'
    enabled: app.print_state == 'printing' or app.print_state == 'paused'
    canvas.before:
        Color:
            rgba: 1,1,1,1 if self.enabled and not self.paused else 0
        RoundedRectangle:
            pos: self.center_x-p.btn_height/2, self.center_y-p.btn_height/2
            size: 0.39*p.btn_height,p.btn_height
            radius: (p.icon_radius,)
        RoundedRectangle:
            pos: self.center_x+p.btn_height/2-0.4*p.btn_height, self.center_y-p.btn_height/2
            size: 0.39*p.btn_height,p.btn_height
            radius: (p.icon_radius,)
    canvas:
        Color:
            rgba: 1,1,1,1 if self.enabled and self.paused else 0
        Triangle:
            points: self.center_x-pw, self.center_y- ph,   self.center_x-pw, self.center_y+ ph,   self.center_x+pw, self.center_y
        Line:
            width: p.icon_radius
            points: self.center_x-pw, self.center_y- ph,   self.center_x-pw, self.center_y+ ph,   self.center_x+pw, self.center_y
            close: True

<Btn@RoundButton>:
    title: ''
    canvas:
        Color:
            rgba: p.btn
        RoundedRectangle:
            radius: (p.radius,)
            pos: self.pos
            size: self.size

<Btn_Outline@RoundButton>:
    title: ''
    canvas.before:
        Color:
            rgba: p.btn_outline
        Line:
            rounded_rectangle: (self.x, self.y, self.width, self.height, p.radius)
            width: 1

<BtnTriple>:
    #filament_color: (1, 0, 0)
    #filament_amount: 0.4
    title_upper: 'Unload'
    title_lower: ""
    w1: 0
    w2: 0
    w3: 0
    size_hint: None, None
    size: self.w1+self.w2+self.w3, p.btn_height
    #:set w 19
    canvas:
        Color:
            rgb: root.filament_color
        RoundedRectangle:
            size: root.size
            pos: root.pos
            radius: (p.radius,)
        Color:
            rgb: root.bg_color
        RoundedRectangle:
            size: root.width * (1-root.filament_amount), root.height
            pos: root.x + root.filament_amount * root.width, root.y
            radius: (0, p.radius, p.radius, 0)
        Color:
            rgba: p.btn_outline
        Line:
            width: 1
            rounded_rectangle: (self.x, self.y, self.width, self.height, p.radius)
        Color:
            rgba: root.label_color
        Line:
            points: self.x+self.w1, self.y+6, self.x+self.w1, self.top-6
        Line:
            points: self.x+self.w1+1+self.w2, self.y+6, self.x+self.w1+1+self.w2, self.top-6
    BaseButton:
        size: root.w1, root.height
        pos: root.pos
        enabled: False
        canvas:
            Color:
                rgba: root.label_color #if self.enabled else p.button_disabled
            Triangle:
                points: (self.x+self.width/2+w/2, self.center_y- w, self.x+self.width/2+w/2, self.center_y+ w, self.x+self.width/2-w/2, self.center_y)
            Color:
                rgba: p.translucent_white if self.pressed else (0,0,0,0)
            RoundedRectangle:
                radius: (p.radius, 0,0,p.radius)
                size: self.size
                pos: self.pos
    BaseButton:
        id: btn_load
        size: root.w2, root.height
        pos: root.x + root.w1,root.y
        enabled: True
        on_release: Factory.FilamentChooserPopup().open()
        canvas:
            Color:
                rgba: p.translucent_white if self.pressed else (0,0,0,0)
            Rectangle:
                size: self.size
                pos: self.pos
        Label:
            color: root.label_color
            text: root.title_upper
            size: btn_load.size
            text_size: self.size
            top: root.top
            center_x: root.center_x
            font_size: p.normal_font
            halign: 'center'
            valign: 'top'
            padding_y: 10
        Label:
            color: root.label_color
            #color: p.button_disabled
            text: root.title_lower
            size: btn_load.size
            text_size: self.size
            top: root.top
            center_x: root.center_x
            font_size: p.normal_font
            halign: 'center'
            valign: 'bottom'
            padding_y: 10
            
    BaseButton:
        size: root.w3, root.height
        pos: root.x + root.w1+root.w2,root.y
        enabled: False
        canvas:
            Color:
                rgba: root.label_color #if self.enabled else p.button_disabled
            Triangle:
                points: (self.x+self.width/2-w/2, self.center_y- w, self.x+self.width/2-w/2, self.center_y+ w, self.x+self.width/2+w/2, self.center_y)
            Color:
                rgba: p.translucent_white if self.pressed else (0,0,0,0)
            RoundedRectangle:
                radius: (0,p.radius,p.radius,0)
                size: self.size
                pos: self.pos

<BtnTripleZ@Widget>:
    h1: 0
    h2: 0
    h3: 0
    size_hint: None, None
    canvas:
        Color:
            rgba: p.btn_outline
        Line:
            rounded_rectangle: (self.x, self.y, self.width, self.height, p.radius)
        Rectangle:
            pos: self.x+6, self.y+self.h1
            size: self.width-12,1
        Rectangle:
            pos: self.x+6, self.y+self.h1+self.h2
            size: self.width-12,1
    #:set t 9.5
    #:set u 19 #Triangle has this size x2
    BaseButton:
        on_press: app.send_z_up() if app.invert_z_controls else app.send_z_down()
        on_release: app.send_z_stop()
        enabled: app.homed['z']
        size: root.width, root.h1
        pos: root.x, root.y
        canvas.before:
            Color:
                rgba: p.translucent_white if self.pressed else (0,0,0,0)
            RoundedRectangle:
                radius: (0,0,p.radius,p.radius)
                size: self.size
                pos: self.pos
            Color:
                rgba: (1,1,1,1) if self.enabled else p.btn_disabled
            Triangle:
                points: self.center_x-u,self.center_y+t,   self.center_x+u,self.center_y+t,   self.center_x,self.center_y-t
    Btn_Home:
        axis_id: 'Z'
        size: root.width, root.h2
        pos: root.x, root.h1 + root.y
        canvas.after:
            Clear
            Color:
                rgba: p.translucent_white if self.pressed else (0,0,0,0)
            Rectangle:
                size: self.size
                pos: self.pos
    BaseButton:
        on_press: app.send_z_down() if app.invert_z_controls else app.send_z_up()
        on_release: app.send_z_stop()
        enabled: app.homed['z']
        size: root.width, root.h3
        pos: root.x, root.top-root.h3
        canvas.before:
            Color:
                rgba: p.translucent_white if self.pressed else (0,0,0,0)
            RoundedRectangle:
                radius: (p.radius,p.radius,0,0)
                size: self.size
                pos: self.pos
            Color:
                rgba: (1,1,1,1) if self.enabled else p.btn_disabled
            Triangle:
                points: self.center_x-u,self.center_y-t,   self.center_x+u,self.center_y-t,   self.center_x,self.center_y+t

<Btn_Home@RoundButton>:
    axis_id: 'Z'
    on_release: app.send_home(self.axis_id)
    enabled: app.printer_objects_available
    canvas:
        Color:
            rgba: (1,1,1,1) if self.enabled else p.btn_disabled
        Rectangle:
            source: p.kgui_dir+'/Logos/HomeAxisIcon.png'
            size: 66, 66
            pos: self.center_x-32, self.center_y-32
        Color:
            rgba: p.translucent_white if self.pressed else (0,0,0,0)
        Rectangle:
            size: self.size
            pos: self.pos
    Label:
        pos: root.x, root.y-2
        text: root.axis_id
        color: p.background
        font_size: p.normal_font
        bold: True
        size: root.size
        text_size: self.size
        center_x: root.center_x
        center_y: root.center_y
        halign: 'center'
        valign: 'middle'

<Btn_Temp@BaseButton>:
    red: False
    large_value: "-"
    small_value: "-"
    size: p.btn_temp_width, p.btn_height
    canvas.after:
        Color:
            rgba: p.translucent_white if self.pressed and self.enabled else (0,0,0,0)
        RoundedRectangle:
            radius: (p.radius,)
            size: self.width + 40, self.height + 40
            pos: self.x - 20, self.y - 20
    Label:
        color: p.red if root.red else (1,1,1,1)
        text: root.large_value
        size_hint: None, None
        size: root.width+50, root.height
        text_size: self.size
        y: root.y + 5
        right: root.right
        font_size: p.large_font
        valign: 'top'
        halign: 'right'
    Label:
        color: p.btn_disabled
        text: root.small_value
        size_hint: None, None
        size: root.width+50, root.height
        text_size: self.size
        y: root.y -3
        right: root.right
        font_size: p.normal_font
        valign: 'bottom'
        halign: 'right'

<Btn_P_Cancel@BaseButton>:
    title: "Cancel"
    single: False
    height: 70
    canvas:
        Color:
            rgba: p.divider
        Line:
            points: self.x, self.top, self.right, self.top
        Color:# Highlight pressed button
            rgba: p.translucent_white if self.pressed else (0,0,0,0)    
        RoundedRectangle:
            radius:(0,0,p.radius,p.popup_radius) if self.single else (0,0,0, p.popup_radius)
            pos: self.pos
            size: self.size

<Btn_P_Confirm@BaseButton>:
    title: "Confirm"
    height: 70
    enabled: False
    canvas:
        Color:
            rgba: p.divider
        Line:
            points: self.x, self.y, self.x, self.top, self.right, self.top
        Color:# Highlight pressed button
            rgba: p.translucent_white if self.pressed else (0,0,0,0)    
        RoundedRectangle:
            radius: (0,0,p.radius,0)
            pos: self.pos
            size: self.size

<Btn_Slider>:
    #:set t 9  #half of width
    #:set j 15
    x: self.px-self.width/2-self.offset
    size: 68,60
    size_hint: None,None 
    active: False
    canvas:
        Color:
            rgba: p.medium_light_gray if self.active else p.medium_gray
        RoundedRectangle:
            radius: (p.radius,)
            size: self.size
            pos: self.pos
        Triangle:
            points: [self.x+self.width/2+self.offset,self.top+j,   self.x+self.width/2+t+self.offset,self.top,    self.x+self.width/2-t+self.offset,self.top] if 2*abs(self.offset)!=self.width else [self.x+self.width/2+self.offset,self.top+j, self.x+self.width/2+self.offset,self.top-10, self.x+self.width/2+self.offset-(self.offset/abs(self.offset))*j,self.top]
    Label:
        markup: True
        text: root.s_title
        size: root.size
        text_size: self.size
        pos: root.pos        
        font_size: p.extra_small_font
        valign: 'middle'
        halign: 'center'

<UltraSlider>:
    #:set slider_pos_y 95
    size_hint: None,None
    size: p.screen_width - 2*p.small_padding - 2*p.padding, 200
    px: self.x + p.padding
    canvas:
        Color:
            rgba: (1,1,1,1) if root.pressed else p.btn
        RoundedRectangle:
            radius: (4,)
            size: root.width-2*p.padding, 8
            pos: root.x+p.padding, slider_pos_y-4+root.y
        Color:
            rgba: (0, 0, 0, 0) if root.pressed else p.medium_light_gray
        RoundedRectangle:
            radius: (4,4,4,4)
            size: self.px - p.padding - self.x + 1, 8
            pos: root.x+p.padding, slider_pos_y-4+root.y
        Color:
            rgba: (0,0,0,0) if root.pressed  else (1,1,1,1) 
        Ellipse:
            size: 20,20
            pos: root.px-10,slider_pos_y-10+root.y
    Label:
        id: value_label
        text: root.disp
        max_lines: 1
        size_hint: None,None
        pos_hint: None,None
        size: root.width, p.large_font
        font_size: p.large_font
        y: root.y + 120
        center_x: root.center_x
        color: p.light_gray
        valign: 'middle'
        halign: 'center'

# Not used, this is for when klipper supports temperature offset
# <UltraOffsetSlider>:
#     offset: 0
#     RoundButton:
#         id: btn_plus
#         on_release: self.offset += 2.5
#         size: 62, 62
#         right: root.right-p.padding
#         y: root.y + 120
#         canvas:
#             Color:
#                 rgba: 1,1,1,1
#             Rectangle:
#                 size: 34, 5
#                 pos: self.center_x - 34/2, self.center_y - 5/2
#             Rectangle:
#                 size: 5, 34
#                 pos: self.center_x - 5/2, self.center_y - 34/2
#     RoundButton:
#         id: btn_minus
#         on_release: self.offset -= 2.5
#         size: 62, 62
#         right: btn_plus.x
#         y: btn_plus.y
#         canvas:
#             Color:
#                 rgba: 1,1,1,1
#             Rectangle:
#                 size: 34, 5
#                 pos: self.center_x - 34/2, self.center_y - 5/2
#     RoundButton:
#         on_release: self.offset = 0
#         size: 62, 62
#         right: btn_minus.x
#         y: btn_plus.y
#         canvas:
#             Color:
#                 rgba: (0,0,0,0) if root.offset == 0 else (1,1,1,1)
#             Line:
#                 width: 2.6
#                 circle: (self.center_x, self.center_y, 15, 0, 270)
#             Triangle:
#                 points: (self.center_x - 8, self.center_y + 15, self.center_x, self.center_y + 15 + 8, self.center_x, self.center_y + 15 - 8)
                
<BasePopup>:
    title_size: p.large_font
    title_align: 'center'
    background_color: (0.03,0.03,0.03,0.56) #reduces background darkening from 0.7
    size_hint: 0.67, 0.3
    pos_hint: {'center_y': 0.5, 'center_x':0.5}

<ZAdjustPopup@BasePopup>:
    size_hint: 0.95,0.4
    title: "Calibrate Z Height"
    FloatLayout:
        UltraSlider:
            val: root.val
            buttons: [[0,0,"default", None]]
            val_min: -0.5
            val_max: 0.5
            unit: "mm"
            roundto: 2
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        Btn_P_Cancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        Btn_P_Confirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_z_adjust(slider.val), root.dismiss()

<PressureAdvancePopup@BasePopup>:
    size_hint: 0.95, 0.4
    title: "Set Pressure Advance"
    FloatLayout:
        UltraSlider:
            val: root.val
            buttons: []
            val_min: 0
            val_max: 0.05
            unit: "mm/mm/s"
            roundto: 3
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        Btn_P_Cancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        Btn_P_Confirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_pressure_advance(slider.val), root.dismiss()

<PressureAdvanceConfPopup@BasePopup>:
    size_hint: 0.95, 0.4
    title: "Configure Pressure Advance"
    FloatLayout:
        UltraSlider:
            val: root.val
            buttons: []
            val_min: 0
            val_max: 0.05
            unit: "mm/mm/s"
            roundto: 3
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        Btn_P_Cancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        Btn_P_Confirm:
            title: "Set and restart"
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.write_pressure_advance(slider.val), root.dismiss()

<AccPopup@BasePopup>:
    title: "Set Acceleration"
    size_hint: 0.83,0.4
    FloatLayout:
        UltraSlider:
            val: root.val
            val_min: 2000
            val_max: 50000
            unit: "mm/s²"
            roundto: -2
            buttons: [[36000,0,"default",None],]
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5}
            y: btn_cancel.top+40
        Btn_P_Cancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        Btn_P_Confirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_acceleration(slider.val), root.dismiss()

<AccConfPopup@BasePopup>:
    title: "Configure Acceleration"
    size_hint: 0.83,0.4
    FloatLayout:
        UltraSlider:
            val: root.val
            val_min: 2000
            val_max: 50000
            unit: "mm/s²"
            roundto: -2
            buttons: [[36000,0,"default",None],]
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5}
            y: btn_cancel.top+40
        Btn_P_Cancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        Btn_P_Confirm:
            title: "Set and restart"
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.write_config('printer', 'max_accel', slider.val), root.dismiss()

<SpeedPopup@BasePopup>:
    size_hint: 0.95, 0.4
    title: "Set Speed Factor"
    FloatLayout:
        UltraSlider:
            val: root.val
            buttons: [[100,0,"no multiplier",None]]
            val_min: 10
            val_max: 500
            unit: "%"
            roundto: 0
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        Btn_P_Cancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        Btn_P_Confirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_speed(slider.val), root.dismiss()

<FlowPopup@BasePopup>:
    size_hint: 0.95, 0.4
    title: "Set Material Flow"
    FloatLayout:
        UltraSlider:
            val: root.val
            buttons: [[100,0,"no multiplier",None]]
            val_min: 90
            val_max: 110
            unit: "%"
            roundto: 1
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        Btn_P_Cancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        Btn_P_Confirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_flow(slider.val), root.dismiss()

<FanPopup@BasePopup>:
    size_hint: 0.95, 0.4
    title: "Set Part Cooling"
    FloatLayout:
        UltraSlider:
            val: root.val
            buttons: [[0,0,"Off",None]]
            val_min: 0
            val_max: 100
            unit: "%"
            roundto: 0
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        Btn_P_Cancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        Btn_P_Confirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_fan(slider.val), root.dismiss()

<BedTempPopup@BasePopup>:
    size_hint: 0.95, 0.4
    title: "Set Buildplate Temperature"
    FloatLayout:
        BedTempSlider:
            id: slider
            val: root.val['B'][0]
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        Btn_P_Cancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        Btn_P_Confirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_temp(slider.val, "B"), root.dismiss()

<ExtTempPopup@BasePopup>:
    size_hint: 0.95, 0.4
    title: "Set "+root.creator.heater_id+" Temperature"
    FloatLayout:
        ExtTempSlider:
            val: root.val[root.creator.heater_id][0]
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        Btn_P_Cancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        Btn_P_Confirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_temp(slider.val, root.creator.heater_id); root.dismiss()

# Not used, this is for when klipper gets temperature offsets
# <ExtTempOffsetPopup@BasePopup>:
#     size_hint: 0.95, 0.4
#     title: "Set "+root.creator.heater_id+" Temperature"
#     FloatLayout:
#         ExtTempOffsetSlider:
#             val: root.val[root.creator.heater_id][0]
#             id: slider
#             width: root.width
#             pos_hint: {'center_x':0.5, 'y':0.35}
#         Btn_P_Cancel:
#             id: btn_cancel
#             width: root.width/2
#             pos: root.pos
#             on_release: root.dismiss()
#         Btn_P_Confirm:
#             title: "Set Offset" if slider.offset != 0 else "Set Temperature"
#             width: root.width/2
#             pos: root.center_x, root.y
#             on_release: app.send_temp(slider.val, root.creator.heater_id); root.dismiss()

<Option>:
    selected: False
    size: 90, 60
    #: set o_padding 8
    canvas.before:
        Color:
            rgba: p.btn if self.selected else (0,0,0,0)
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: (p.radius,)
        Color:
            rgba: self.option_color
        RoundedRectangle:
            size: self.width - 2*o_padding, self.height - 2*o_padding
            pos: self.x + o_padding, self.y + o_padding
            radius: (p.icon_radius,)

<OptionBox>:
    title: " "
    # canvas:
    #     Color:
    #         rgba:(0,0,0,0.1)
    #     Rectangle:
    #         size: self.size
    #         pos: self.pos
    Label:
        id: box_title
        text: root.title
        font_size: p.normal_font
        size: self.texture_size
        pos_hint: {'top':1, 'x':0}
        size_hint: None, None
        color: p.light_gray
        valign: 'middle'
        halign: 'left'
        padding_y: 6
        padding_x: 2 * o_padding
    Divider:
        width: root.width 
        pos: root.x, box_title.y
    StackLayout:
        size: root.width, root.height - box_title.height
        size_hint: None, None
        pos: root.pos
        id: stack
        spacing: [0]
        padding: [o_padding]

<FilamentChooserPopup@BasePopup>:
    size_hint: 0.95, 0.55
    title: "Choose a Material"
    FloatLayout:
        id: container
        FloatLayout:
            size_hint: None, None
            size: root.width, container.height-btn_cancel.height
            pos: root.x, btn_cancel.top
            OptionBox:
                id: recent_materials
                title: "Recently unloaded"
                size_hint: 0.87, 0.3
                pos_hint: {'center_x':0.5, 'top':1}

        Btn_P_Cancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        Btn_P_Confirm:
            enabled: True
            title: "Start Loading"
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_temp(slider.val, root.creator.heater_id); root.dismiss()

<ErrorPopup>:
    size_hint: 0.8, 0.5
    error: True
    message: "--"
    title: "Error - Firmware stopped"
    FloatLayout:
        Label:
            text: root.message
            halign: 'center'
            valign: 'middle'
            max_lines: 5
            size_hint: 0.9, 0.5
            pos_hint: {'center_x': 0.5, 'center_y': 0.5+0.1}
            text_size: self.size
            font_size: p.large_font
            color: p.light_gray
        Btn_P_Cancel:
            id: btn_cancel
            title: "Restart Printer"
            width: root.width
            pos: root.pos
            on_release: app.restart_klipper()

<XyField>:
    mm: [0, 0, 0]
    px: [0, 0]
    canvas.after:
        # Outline with xy homing buttons
        Color:
            rgba: p.btn_outline if app.xy_homing_controls else (0,0,0,0)
        Line:
            width: 1
            rounded_rectangle: (self.x, self.y, self.width + p.btn_height, self.height, p.radius)
        Line:
            points: self.right, self.top-10,   self.right, self.y+10
        Line:
            points: self.right + 10, self.y + 2*p.btn_height,   self.right + p.btn_height -10, self.y + 2*p.btn_height
        Line:
            points: self.right + 10, self.y + p.btn_height,   self.right + p.btn_height -10, self.y + p.btn_height
        # Outline without xy homing buttons
        Color:
            rgba: (0,0,0,0) if app.xy_homing_controls else p.btn_outline
        Line:
            width: 1
            rounded_rectangle: (self.x, self.y, self.width, self.height, p.radius)

        Color:
            rgba: p.btn_outline if self.pressed else (0,0,0,0)
        Line:
            width: 1
            points: self.x, self.px[1],   self.right, self.px[1]
        Line:
            width: 1
            points: self.px[0], self.y,   self.px[0], self.top
        Color:
            rgba: (1,1,1,1) if self.enabled else (0,0,0,0)
        Ellipse:
            pos: self.px[0] - self.point_radius, self.px[1] - self.point_radius
            size: (self.point_radius*2, self.point_radius*2)
    Label:
        text: "X:{:.0f} Y:{:.0f} Z:{:.0f}".format(root.mm[0], root.mm[1], root.mm[2])
        size_hint: None, None
        size: self.texture_size
        pos: root.x + 7, root.y + 4
        font_size: p.normal_font
        color: p.nozzle


# FILE  ########################################################################

<FileTab@TabbedPanelItem>:
    background_down: ''
    background_normal: p.kgui_dir+'/Logos/Black.png'
    background_color: p.background
    canvas:
        Rectangle:
            source: p.kgui_dir+'/Logos/FilesIcon.png'
            size: 100,100
            pos: 250, 0
    FC:
        id: fc
        canvas.before:         
            Color:
                rgba: p.background
            Rectangle:
                size: self.size

<PrintPopup>:
    title: 'Print'
    title_size: p.large_font
    size_hint: 0.8, 0.3
    FloatLayout:
        Label:
            text: root.prompt
            halign: 'center'
            valign: 'middle'
            max_lines: 2
            size_hint: 0.9, 0.5
            pos_hint: {'center_x': 0.5, 'center_y': 0.5+0.2}
            text_size: self.size
            font_size: p.large_font
            color: p.light_gray
        Btn_P_Cancel:
            id: btn_cancel
            width: root.width/3
            pos: root.pos
            on_release: root.dismiss()
        BaseButton:
            id: btn_del
            canvas:
                Color:
                    rgba: p.divider
                Line:
                    points: self.x, self.y, self.x, self.top, self.right, self.top
            title: 'Delete'
            size: root.width/3, 70
            pos: btn_cancel.right, root.y
            on_release: root.delete()
        Btn_P_Confirm:
            title: 'Print'
            enabled: app.printer_objects_available
            width: root.width/3
            pos: btn_del.right, root.y
            on_release: root.confirm()

<DelPopup>:
    title: 'Delete'
    title_size: p.large_font
    size_hint: 0.8, 0.3
    FloatLayout:
        Label:
            text: root.creator.prompt
            halign: 'center'
            valign: 'middle'
            max_lines: 2
            size_hint: 0.9, 0.5
            pos_hint: {'center_x': 0.5, 'center_y': 0.5+0.2}
            text_size: self.size
            font_size: p.large_font
            color: p.light_gray
        Btn_P_Cancel:
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        Btn_P_Confirm:
            title: 'Delete'
            width: root.width/2
            enabled: True
            pos: root.center_x, root.y
            on_release: root.confirm()


# SETTING ########################################################################

<SettingTab@TabbedPanelItem>:
    background_down: '' 
    background_normal: p.kgui_dir+'/Logos/Black.png'
    background_color: p.background
    canvas:
        Rectangle:
            source: p.kgui_dir+'/Logos/SettingsIcon.png'
            size: 100, 100
            pos: 450, 0

    ScreenManager:
        name: 'SettingScreenManager'
        transition: screenmanager.NoTransition()
        SettingScreen:
        WifiScreen:

<SettingScreen@Screen>:
    name: 'SettingScreen'
    ScrollView:
        canvas.before:
            Color:
                rgba: p.background
            Rectangle:
                pos: self.pos
                size: self.size
        BoxLayout:
            orientation:'vertical'
            height: self.minimum_height
            pos: 0, root.height - self.height
            size_hint_y: None
            SI_Switch:
                left_title: "Light"
            SI_Switch:
                left_title: "Calibrate for every printjob"
            SetItem:
                left_title: "Max. printhead Acceleration"
                right_title: str(app.default_acceleration)+"mm/s²"
                on_release: Factory.AccConfPopup(val=app.default_acceleration).open()
            SetItem:
                left_title: "Pressure Advance"
                right_title: "{:4.3f}s".format(app.default_pressure_advance)
                on_release: Factory.PressureAdvanceConfPopup(val=app.default_pressure_advance).open()
            SI_Wifi:
                left_title: "Wifi"
            SetItem:
                left_title: "Shutdown..."
                on_release: Factory.PowerPopup().open()

<WifiScreen>:
    name: 'WifiScreen'
    FloatLayout:
        id: float
        canvas.before:
            Color:
                rgba: p.background
            Rectangle:
                pos: self.pos
                size: self.size
        RectangleButton:
            id: btn
            #size_hint: 1, 0.1
            size: 150, 110
            pos_hint: {'x':0, 'top':1}
            #: set q 26
            canvas.before:
                Color:
                    rgba: 1,1,1,1
                Triangle:
                    points: btn.center_x-q, btn.center_y,   btn.center_x, btn.center_y-q,   btn.center_x, btn.center_y+q
            on_release:
                #root.manager.transition.direction = 'right'
                root.manager.current = 'SettingScreen'
        Label:
            text: "Wifi"
            font_size: p.large_font
            text_size: self.size
            size_hint: 1, 0.12
            pos_hint: {'x':0, 'top':1}
            valign: 'middle'
            halign: 'center' 
        ScrollView:
            size_hint: 1, 1-0.12
            pos_hint: {'x':0, 'y':0}
            do_scroll_x: False
            BoxLayout:
                id: wifi_box
                orientation: 'vertical'
                height: self.minimum_height
                size_hint_y: None    

<SetItem>:
    size_hint_y: None
    height: 110
    width: p.screen_width
    left_title: ""
    right_title: ""
    Label:
        id: left_label
        text: root.left_title
        font_size: p.normal_font
        text_size: self.size
        size: root.size
        valign: 'middle'
        pos: root.pos
        padding_x: p.padding
    Label:
        id: right_label
        text: root.right_title
        font_size: p.normal_font
        text_size: self.size
        color: p.medium_light_gray
        size: 250, root.height
        size_hint: None, None
        valign: 'middle'
        halign: 'right'
        y: root.y
        right: p.screen_width
        padding_x: p.padding
    Divider:
        y: root.y

<Divider@Widget>:
    size_hint: None, None
    height: 1
    width: p.screen_width - 2*p.small_padding
    x: p.small_padding
    canvas:
        Color:
            rgba: p.divider
        Rectangle:
            pos: self.pos
            size: self.width, 1

<SI_Switch@SetItem>:
    enabled: False
    Switch:
        id: knopf
        size_hint: None, None
        pos_hint: {'center_y': 0.5}
        right: p.screen_width-p.padding +p.small_padding #to increase touch area

<SI_WifiNetwork>:
    Label:
        text: root.network['ssid']
        font_size: p.normal_font
        text_size: self.size
        color: p.light_gray
        size: root.width, root.height
        size_hint: None, None
        valign: 'middle'
        halign: 'right'
        y: root.y
        right: p.screen_width
        padding_x: p.padding
    Label:
        text: str(root.network['signal'])
        font_size: p.normal_font
        padding_x: p.padding
        width: self.texture_size[0]
        height: root.height
        size_hint: None, None
        color: root.get_color()
        pos: root.pos

<PasswordPopup>:
    txt_input: pwd_input
    FloatLayout:
        Label:
            text: 'Password'
            font_size: p.normal_font
            size: self.texture_size
            size_hint: None, None
            pos_hint: {'x': 0.1, 'y': 0.75}
        TextInput:
            id: pwd_input
            multiline: False
            password: True
            height: self.minimum_height
            size_hint: 0.7, None
            pos_hint: {'x': 0.1, 'center_y': 0.63}
        RectangleButton:
            on_press: 
                pwd_input.password = not pwd_input.password
                lb_show.text = "show" if pwd_input.password else "hide"
            on_release:
                pwd_input.focus = True
            id: btn_s
            height: pwd_input.height-1
            size_hint: 0.1, None
            pos_hint: {'x': 0.81, 'center_y': 0.63}
            Label:
                id: lb_show
                size: btn_s.size
                pos: btn_s.pos
                text_size: self.size
                text: "show"
                font_size: p.extra_small_font
                halign: 'center'
                valign: 'middle'
        Btn_P_Cancel:
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        Btn_P_Confirm:
            enabled: len(pwd_input.text) > 3
            width: root.width/2
            pos: root.center_x, root.y
            on_release: root.confirm()

<ConnectionPopup>:
    title: self.network['ssid']
    size_hint: 0.65, 0.4
    FloatLayout:
        RectangleButton:
            id: btn_toggle_connect
            title: 'Disconnect' if root.connected else 'Connect'
            size_hint: 0.7, None
            height: 80
            pos_hint: {'center_x': 0.5, 'top': 1}
            on_release: root.toggle_connected()
        Divider:
            size_hint: None, None
            size: btn_toggle_connect.width, 1
            pos: btn_toggle_connect.pos
        RectangleButton:
            id: btn_delete
            title: 'Delete connection'
            size: btn_toggle_connect.size
            x: btn_toggle_connect.x
            top: btn_toggle_connect.y
            on_release: root.delete()
        Btn_P_Cancel:
            single: True
            width: root.width
            pos: root.pos
            on_release: root.dismiss()

<PowerPopup@BasePopup>:
    title: "Shutdown..."
    title_size: p.large_font
    size_hint: 0.65, 0.5
    FloatLayout:
        RectangleButton:
            id: btn_poweroff
            title: "Shutdown"
            size_hint: 0.7, None
            height: 90
            pos_hint: {'center_x': 0.5, 'y': 0.18}
            on_release: app.poweroff()
        Divider:
            size_hint: None, None
            size: btn_poweroff.width, 1
            pos: btn_reboot.pos
        RectangleButton:
            id: btn_reboot
            title: "Reboot"
            size: btn_poweroff.size
            pos: btn_poweroff.x, btn_poweroff.top
            on_release: app.reboot()
        Divider:
            size_hint: None, None
            size: btn_poweroff.width, 1
            pos: btn_restart_klipper.pos
        RectangleButton:
            id: btn_restart_klipper
            title: "Restart Klipper"
            size: btn_poweroff.size
            pos: btn_poweroff.x, btn_reboot.top
            on_release: app.restart_klipper()
        Divider:
            size_hint: None, None
            size: btn_poweroff.width, 1
            pos: btn_quit.pos
        RectangleButton:
            id: btn_quit
            title: "Quit to tty"
            size: btn_poweroff.size
            pos: btn_poweroff.x, btn_restart_klipper.top
            on_release: app.quit()
        Btn_P_Cancel:
            single: True
            width: root.width
            pos: root.pos
            on_release: root.dismiss()

<Background@Widget>:
    canvas.before:
        Color:
            rgba: p.background
        Rectangle:
            pos: self.pos
            size: self.size

# Override style.kv Switch widget
<-Switch>:
    active_norm_pos: max(0., min(1., (int(self.active) + self.touch_distance / sp(move))))
    width: wdt - rad + Rad + 2*p.small_padding
    canvas:
        Color:
            rgba: p.btn
        #: set wdt 60
        #: set rad 11
        #: set Rad 16
        #: set move wdt-2*rad
        RoundedRectangle:
            size: sp(wdt), sp(rad*2)
            pos: int(self.center_x - sp(wdt/2)), int(self.center_y - sp(rad))
            radius: (int(sp(rad)),)
        Color:
            rgba: (1,1,1,1) if self.active else p.medium_light_gray
        
        Ellipse:
            size: sp(Rad*2), sp(Rad*2)
            pos: int(self.center_x - sp(move/2+Rad)  + self.active_norm_pos * sp(move)), int(self.center_y - sp(Rad))
        
<-TabbedPanelStrip>:
    canvas:
        Color:
            rgba: (0, 0, 0, 1) # black colour of the strip behind all 3 tab buttons
        Rectangle:
            size: self.size
            pos: self.pos

<StripLayout>: #a child of Gridlayout which is used by tabbedpanel, this disables padding
    padding: (0,0,0,0)


#:kivy 1.8.0

#:import Factory kivy.factory.Factory
#:import screenmanager kivy.uix.screenmanager

#:import p parameters

<HomeTab@TabbedPanelItem>:
    background_down: '' # dadurch nimmt es background color an, sowieso immer mit dessen opacity auch waere es ein bild
    background_color: p.background
    canvas:
        Rectangle:
            source: p.kgui_dir+'/logos/home.png'
            size: 60, 60
            pos: 75-30, 20
    FloatLayout:
        Background:
            pos_hint: {'x':0,'y':0}
            size_hint: 1,1
        ProgressBar:
            enabled: app.print_title != ""
            id: progress_bar
            max: 1
            value: app.progress
            size_hint: None, None
            size: p.screen_width-2*p.h_padding+2, p.progress_bar_height
            pos: p.h_padding-1, p.tab_height + p.padding
        Label:
            text: app.print_time
            size_hint: None, None
            size: p.screen_width-2*p.padding, p.normal_font
            text_size: self.size
            font_size: p.normal_font
            x: p.h_padding - 2
            top: progress_bar.y - 5
            halign: 'left'
            valign: 'bottom'
        Label:
            text: app.print_done_time
            size_hint: None, None
            size: p.screen_width-2*p.padding, p.normal_font
            text_size: self.size
            font_size: p.normal_font
            x: p.h_padding - 2
            top: progress_bar.y - 5
            color: p.btn_disabled
            halign: 'right'
            valign: 'bottom'
        BtnStop:
            on_release: Factory.StopPopup().open()
            id: btn_stop
            size: 118,118
            center_y: progress_bar.top + p.padding + p.btn_stop/2
            center_x: p.screen_width - p.btn_stop/2 - p.h_padding
        BtnPlay:
            on_release: app.send_resume()
            size: btn_stop.size
            y: btn_stop.y
            right: btn_stop.x
        BtnPause:
            on_release: app.send_pause()
            size: btn_stop.size
            y: btn_stop.y
            right: btn_stop.x
        Label:
            id: l_filename
            text: app.print_title
            color: p.btn_disabled if app.print_state == 'no printjob' else (1,1,1,1)
            size_hint: None, None
            size: 280,134
            text_size: self.size
            font_size: p.large_font
            x: p.h_padding-3
            center_y: btn_stop.center_y
            shorten: True
            halign: 'left'
            valign: 'middle'
        ScreenManager:
            current: 'printingscreen' if app.print_state == 'printing' else 'homescreen'
            transition: screenmanager.NoTransition()
            id: hs_manager
            size_hint: None, None
            size: p.screen_width, p.screen_height-btn_stop.center_y-p.btn_stop/2
            pos: root.x, btn_stop.center_y+p.btn_stop/2
            HomeScreen:
            PrintingScreen:
        BtnTemp:
            id: temp_T1
            tool_id: "T1"
            on_release: Factory.ExtTempPopup(creator=self, val=app.temp).open()
            large_value: "{:3.0f}°C".format(app.temp[self.tool_id][1])
            small_value: "{:3.0f}".format(app.temp[self.tool_id][0]) if app.temp[self.tool_id][0] != 0 else "Off"
            red: app.temp[self.tool_id][1] > 50
            width: 80
            right: temp_bed.right if app.extruder_count > 1 else p.mars
            y: p.tab_height + p.padding*3 + p.progress_bar_height + p.btn_stop
        BtnExtruder:
            tool_id: 'T1'
            center_x: p.h_padding + icon_center if app.extruder_count > 1 else p.mars
            y: p.tab_height + p.padding*3 + p.progress_bar_height + p.btn_stop
        BtnTemp:
            id: temp_T0
            tool_id: "T0"
            on_release: Factory.ExtTempPopup(creator=self, val=app.temp).open()
            large_value: "{:3.0f}°C".format(app.temp[self.tool_id][1])
            small_value: "{:3.0f}".format(app.temp[self.tool_id][0]) if app.temp[self.tool_id][0] != 0 else "Off"
            red: app.temp[self.tool_id][1] > 50
            width: 80
            right: temp_bed.right
            y: p.tab_height + p.progress_bar_height + 4*p.padding + p.btn_height + p.btn_stop
        BtnExtruder:
            tool_id: 'T0'
            center_x: p.h_padding + icon_center
            y: p.tab_height + p.padding*4 + p.progress_bar_height + p.btn_height + p.btn_stop
        BtnTemp:
            on_release: Factory.BedTempPopup(creator=self, val=app.temp).open()
            id: temp_bed
            large_value: "{:3.0f}°C".format(app.temp['B'][1])
            small_value: "{:3.0f}".format(app.temp['B'][0]) if app.temp['B'][0] != 0 else "Off"
            red: app.temp['B'][1] > 50
            x: p.h_padding
            y: p.tab_height + p.progress_bar_height + 5*p.padding + 2*p.btn_height + p.btn_stop
            canvas.before:
                Color:
                    rgba: p.nozzle
                #:set bw 78
                #:set bx1 -19
                #:set bx2 +19
                #:set bh 40
                #:set bo 16
                #:set icon_center 25 #25 so its above tab icons
                Line:
                    width: p.icon_radius
                    points: self.x + icon_center - bw/2, self.center_y - p.btn_height/2 + p.icon_radius,   self.x + icon_center + bw/2, self.center_y - p.btn_height/2 + p.icon_radius
                Line:
                    width: p.icon_radius - 0.5
                    bezier: self.x + icon_center + bx1, self.center_y + p.btn_height/2 - p.icon_radius,   self.x + icon_center + bx1 - bo, self.center_y + p.btn_height/2 - bh*0.35 - p.icon_radius,   self.x + icon_center + bx1 + bo, self.center_y + p.btn_height/2 - bh*0.65 - p.icon_radius,   self.x + icon_center + bx1, self.center_y + p.btn_height/2 - bh - p.icon_radius
                Line:
                    width: p.icon_radius - 0.5
                    bezier: self.x + icon_center + bx2, self.center_y + p.btn_height/2 - p.icon_radius,   self.x + icon_center + bx2 - bo, self.center_y + p.btn_height/2 - bh*0.35 - p.icon_radius,   self.x + icon_center + bx2 + bo, self.center_y + p.btn_height/2 - bh*0.65 - p.icon_radius,   self.x + icon_center + bx2, self.center_y + p.btn_height/2 - bh - p.icon_radius
                Line:
                    width: p.icon_radius - 0.5
                    bezier: self.x + icon_center, self.center_y + p.btn_height/2 - p.icon_radius,   self.x + icon_center - bo, self.center_y + p.btn_height/2 - bh*0.35 - p.icon_radius,   self.x + icon_center  + bo, self.center_y + p.btn_height/2 - bh*0.65 - p.icon_radius,   self.x + icon_center, self.center_y + p.btn_height/2 - bh - p.icon_radius

<HomeScreen@Screen>:
    name: "homescreen"
    FloatLayout:
        BtnTriple:
            w1: p.btn_height
            w2: p.btn_width - 2*p.btn_height
            w3: p.btn_height
            tool_id: 'T1'
            tool_idx: 1
            extruder_id: 'extruder1'
            y: p.padding if app.extruder_count > 1 else p.mars
            right: p.screen_width - p.h_padding
        BtnTriple:
            w1: p.btn_height
            w2: p.btn_width - 2*p.btn_height
            w3: p.btn_height
            id: btn_tr_T0
            tool_id: 'T0'
            tool_idx: 0
            extruder_id: 'extruder'
            y: p.padding*2 + p.btn_height
            right: p.screen_width - p.h_padding
        BtnOutline:
            id: btn_calibrate
            on_release: app.send_calibrate()
            enabled: app.printer_objects_available
            text: "Mesh Bed Leveling"
            size: btn_tr_T0.size
            pos: btn_tr_T0.x, 3*p.padding+2*p.btn_height if app.bed_mesh else p.mars
        BtnTripleZ:
            id: btn_tr_Z
            height: xy_field.height
            z_pos: xy_field.ids.z_pos
            h1: self.height/3
            h2: self.height/3
            h3: self.height/3
            width: p.btn_height*p.disp_vertical_stretch
            right: root.right- p.h_padding
            top: root.height-p.padding-p.status_bar_height
        XyField:
            id: xy_field
            size_hint: None, None
            height: p.btn_height*3
            width: self.height + 40
            x: p.h_padding
            top: root.height-p.padding-p.status_bar_height
            enabled: app.printer_objects_available and app.homed['x'] and app.homed['y']
        BtnHome:
            axis_id: 'X'
            size: p.btn_height, p.btn_height
            x: xy_field.right if app.xy_homing_controls else p.mars
            y: xy_field.y
        BtnHome:
            axis_id: 'Y'
            size: p.btn_height, p.btn_height
            x: xy_field.right if app.xy_homing_controls else p.mars
            y: xy_field.y + p.btn_height
        RoundButton:
            id: btn_off
            on_release: app.send_motors_off()
            enabled: app.printer_objects_available
            size: p.btn_height, p.btn_height
            x: xy_field.right if app.xy_homing_controls else p.mars
            top: xy_field.top
            text: "Off"
            color: (1,1,1,1) if btn_off.enabled else p.btn_disabled
            text_size: self.size
            font_size: p.large_font
            halign: 'center'
            valign: 'middle'

<PrintingScreen@Screen>:
    name: "printingscreen"
    FloatLayout:
        BtnTemp:
            id: fan
            on_release: Factory.FanPopup(val=app.fan_speed).open()
            large_value: "{:3.0f}%".format(app.fan_speed)
            small_value: "Print Cooling"
            right: p.screen_width - p.h_padding
            center_y: p.padding + p.btn_height/2 + p.btn_spacing
        BtnTemp:
            id: z_adjust
            on_release: Factory.ZAdjustPopup(val=app.z_adjust).open()
            large_value: "{:3.2f}mm".format(app.z_adjust)
            small_value: "Z Calibration"
            right: p.screen_width - p.h_padding
            center_y: fan.center_y + p.btn_spacing
        BtnTemp:
            id: pressure_advance
            on_release: Factory.PressureAdvancePopup(val=app.pressure_advance).open()
            large_value: "{:4.3f}s".format(app.pressure_advance)
            small_value: "Pressure Advance"
            right: p.screen_width - p.h_padding
            center_y: z_adjust.center_y + p.btn_spacing
        BtnTemp:
            id: acceleration
            on_release: Factory.AccPopup(val=app.acceleration).open()
            large_value: "{:5.0f}mm/s²".format(app.acceleration)
            small_value: "Acceleration"
            right: p.screen_width - p.h_padding
            center_y: pressure_advance.center_y + p.btn_spacing
        BtnTemp:
            id: speed
            on_release: Factory.SpeedPopup(val=app.speed).open()
            large_value: "{:3.0f}%".format(app.speed)
            small_value: "Print Speed"
            x: p.h_padding
            center_y: acceleration.center_y
        BtnTemp:
            id: flow
            on_release: Factory.FlowPopup(val=app.flow).open()
            large_value: "{:3.0f}%".format(app.flow)
            small_value: "Material Flow"
            x: p.h_padding
            center_y: pressure_advance.center_y

<XyField>:
    mm: [0, 0, 0]
    px: [0, 0]
    canvas.after:
        # Outline with xy homing buttons
        Color:
            rgba: p.btn_outline if app.xy_homing_controls else (0,0,0,0)
        Line:
            width: 1
            rounded_rectangle: (self.x, self.y, self.width + p.btn_height, self.height, p.radius)
        Line:
            points: self.right, self.top-p.btn_divider_padding,   self.right, self.y+p.btn_divider_padding
        Line:
            points: self.right + p.btn_divider_padding, self.y + 2*p.btn_height,   self.right + p.btn_height -p.btn_divider_padding, self.y + 2*p.btn_height
        Line:
            points: self.right + p.btn_divider_padding, self.y + p.btn_height,   self.right + p.btn_height -p.btn_divider_padding, self.y + p.btn_height
        # Outline without xy homing buttons
        Color:
            rgba: (0,0,0,0) if app.xy_homing_controls else p.btn_outline
        Line:
            width: 1
            rounded_rectangle: (self.x, self.y, self.width, self.height, p.radius)

        Color:
            rgba: p.btn_outline if self.pressed else (0,0,0,0)
        Line:
            width: 1
            points: self.x, self.px[1],   self.right, self.px[1]
        Line:
            width: 1
            points: self.px[0], self.y,   self.px[0], self.top
        Color:
            rgba: (1,1,1,1) if self.enabled else (0,0,0,0)
        Ellipse:
            pos: self.px[0] - self.point_radius, self.px[1] - self.point_radius
            size: (self.point_radius*2, self.point_radius*2)
    Label:
        id: xy_pos
        text: "X:{:.0f} Y:{:.0f} ".format(root.mm[0], root.mm[1])
        size_hint: None, None
        size: self.texture_size
        pos: root.x + 7, root.y + 4
        font_size: p.normal_font
        color: (1,1,1,1) if root.pressed else p.nozzle
    Label:
        id: z_pos
        text: "Z:{:.0f}".format(root.mm[2])
        size_hint: None, None
        size: self.texture_size
        pos: xy_pos.right, xy_pos.y
        font_size: p.normal_font
        color: p.nozzle


# BUTTONS

<BtnExtruder@BaseButton>:
    #:set esh 17
    size: icon_center*2 + 10, p.btn_height
    tool_id: 'T0'
    selected: False
    canvas:
        Color:
            rgba: p.nozzle_selected if self.selected else p.nozzle
        RoundedRectangle:
            size: self.width, self.height - esh
            pos: self.x, self.y + esh
            radius: (p.icon_radius,)
        Triangle:
            points: self.center_x - esh, self.y + esh,   self.center_x, self.y,   self.center_x + esh, self.y + esh
    # this needs a new label instance since the properties set in BaseButton cannot be overwritten in rule definition (only in instance)
    Label:
        text: str(int(root.tool_id[1]) + 1)
        bold: True
        color: p.background
        center_x: root.center_x
        center_y: root.center_y + esh/2
        font_size: p.large_font + 4

<BtnTriple>:
    w1: 0
    w2: 0
    w3: 0
    size_hint: None, None
    size: self.w1 + self.w2 + self.w3, p.btn_height
    #:set w 19
    canvas:
        Color:
            rgba: self.filament_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: (p.radius,)
        Color:
            rgba: p.background
        Rectangle:
            size: self.width * (1-self.filament_amount), self.height
            pos: self.x + self.filament_amount * self.width, self.y
        Color:
            rgba: p.btn_outline
        Line:
            width: 1
            rounded_rectangle: (self.x, self.y, self.width, self.height, p.radius)
        Line:
            points: self.x+self.w1, self.y+p.btn_divider_padding, self.x+self.w1, self.top-p.btn_divider_padding
        Line:
            points: self.x+self.w1+1+self.w2, self.y+p.btn_divider_padding, self.x+self.w1+1+self.w2, self.top-p.btn_divider_padding
        Color:
            rgba: p.btn_outline if self.material else (0,0,0,0)
        Line:
            points: self.x + self.filament_amount * self.width, self.y+p.btn_divider_padding, self.x + self.filament_amount * self.width, self.top-p.btn_divider_padding
    BaseButton:
        size: root.w1, root.height
        pos: root.pos
        enabled: app.printer_objects_available and app.temp[root.tool_id][0] > app.min_extrude_temp and app.temp[root.tool_id][1] > app.min_extrude_temp
        on_press: app.send_extrude(root.tool_id, -1)
        on_release: app.send_extrude_stop()
        canvas:
            Color:
                rgba: (1,1,1,1) if self.enabled else p.btn_disabled
            Triangle:
                points: (self.x+self.width/2+w/2, self.center_y- w, self.x+self.width/2+w/2, self.center_y+ w, self.x+self.width/2-w/2, self.center_y)
            Color:
                rgba: p.translucent_white if self.pressed else (0,0,0,0)
            RoundedRectangle:
                radius: (p.radius, 0,0,p.radius)
                size: self.size
                pos: self.pos
    RectangleButton:
        id: btn_load
        size: root.w2, root.height
        pos: root.x + root.w1,root.y
        enabled: bool(app.printer_objects_available and app.filament_manager)
        on_release: root.load_unload()
        color: (1,1,1,1) if self.enabled else p.btn_disabled
        text: root.title
        text_size: self.size
        font_size: p.normal_font
        halign: 'center'
        valign: 'middle'
        padding_y: 8
    BaseButton:
        size: root.w3, root.height
        pos: root.x + root.w1+root.w2,root.y
        enabled: app.printer_objects_available and app.temp[root.tool_id][0] > app.min_extrude_temp and app.temp[root.tool_id][1] > app.min_extrude_temp
        on_press: app.send_extrude(root.tool_id)
        on_release: app.send_extrude_stop()
        canvas:
            Color:
                rgba: (1,1,1,1) if self.enabled else p.btn_disabled
            Triangle:
                points: (self.x+self.width/2-w/2, self.center_y- w, self.x+self.width/2-w/2, self.center_y+ w, self.x+self.width/2+w/2, self.center_y)
            Color:
                rgba: p.translucent_white if self.pressed else (0,0,0,0)
            RoundedRectangle:
                radius: (0,p.radius,p.radius,0)
                size: self.size
                pos: self.pos

<BtnTripleZ@Widget>:
    h1: 0
    h2: 0
    h3: 0
    size_hint: None, None
    canvas:
        Color:
            rgba: p.btn_outline
        Line:
            rounded_rectangle: (self.x, self.y, self.width, self.height, p.radius)
        Rectangle:
            pos: self.x+p.btn_divider_padding, self.y+self.h1
            size: self.width-2*p.btn_divider_padding, 1
        Rectangle:
            pos: self.x+p.btn_divider_padding, self.y+self.h1+self.h2
            size: self.width-2*p.btn_divider_padding, 1
    #:set t 9.5
    #:set u 19 #Triangle has this size x2
    BaseButton:
        on_press: app.send_z_up(); root.z_pos.highlighted = True if app.invert_z_controls else app.send_z_up(-1); root.z_pos.highlighted = True
        on_release: app.send_z_stop(); root.z_pos.highlighted = False
        enabled: app.homed['z']
        size: root.width, root.h1
        pos: root.x, root.y
        canvas.before:
            Color:
                rgba: p.translucent_white if self.pressed else (0,0,0,0)
            RoundedRectangle:
                radius: (0,0,p.radius,p.radius)
                size: self.size
                pos: self.pos
            Color:
                rgba: (1,1,1,1) if self.enabled else p.btn_disabled
            Triangle:
                points: self.center_x-u,self.center_y+t,   self.center_x+u,self.center_y+t,   self.center_x,self.center_y-t
    BtnHome:
        axis_id: 'Z'
        size: root.width, root.h2
        pos: root.x, root.h1 + root.y
        canvas.after:
            Clear
            Color:
                rgba: p.translucent_white if self.pressed else (0,0,0,0)
            Rectangle:
                size: self.size
                pos: self.pos
    BaseButton:
        on_press: app.send_z_up(-1); root.z_pos.highlighted = True if app.invert_z_controls else app.send_z_up(); root.z_pos.highlighted = True
        on_release: app.send_z_stop(); root.z_pos.highlighted = False
        enabled: app.homed['z']
        size: root.width, root.h3
        pos: root.x, root.top-root.h3
        canvas.before:
            Color:
                rgba: p.translucent_white if self.pressed else (0,0,0,0)
            RoundedRectangle:
                radius: (p.radius,p.radius,0,0)
                size: self.size
                pos: self.pos
            Color:
                rgba: (1,1,1,1) if self.enabled else p.btn_disabled
            Triangle:
                points: self.center_x-u,self.center_y-t,   self.center_x+u,self.center_y-t,   self.center_x,self.center_y+t

<BtnHome@RoundButton>:
    axis_id: 'Z'
    on_release: app.send_home(self.axis_id)
    enabled: app.printer_objects_available
    canvas:
        Color:
            rgba: (1,1,1,1) if self.enabled else p.btn_disabled
        Rectangle:
            source: p.kgui_dir+'/logos/home_axis.png'
            size: 66, 66
            pos: self.center_x-32, self.center_y-32
        Color:
            rgba: p.translucent_white if self.pressed else (0,0,0,0)
        Rectangle:
            size: self.size
            pos: self.pos
    Label:
        pos: root.x, root.y-2
        text: root.axis_id
        color: p.background
        font_size: p.normal_font
        bold: True
        size: root.size
        text_size: self.size
        center_x: root.center_x
        center_y: root.center_y
        halign: 'center'
        valign: 'middle'

<BtnTemp@BaseButton>:
    red: False
    enabled: app.printer_objects_available
    large_value: "-"
    small_value: "-"
    size: p.btn_temp_width, p.btn_height
    canvas.after:
        Color:
            rgba: p.translucent_white if self.pressed and self.enabled else (0,0,0,0)
        RoundedRectangle:
            radius: (p.radius,)
            size: self.width + 40, self.height + 40
            pos: self.x - 20, self.y - 20
    Label:
        color: p.red if root.red else (1,1,1,1) if root.enabled else p.btn_disabled
        text: root.large_value
        size_hint: None, None
        size: root.width+50, root.height
        text_size: self.size
        y: root.y + 5
        right: root.right
        font_size: p.large_font
        valign: 'top'
        halign: 'right'
    Label:
        color: p.btn_disabled
        text: root.small_value
        size_hint: None, None
        size: root.width+50, root.height
        text_size: self.size
        y: root.y -3
        right: root.right
        font_size: p.normal_font
        valign: 'bottom'
        halign: 'right'

<BtnStop@RoundButton>:
    enabled: app.print_state in ('printing', 'pausing', 'paused')
    canvas.before:
        Color:
            rgba: p.red if self.enabled else (0,0,0,0)
        RoundedRectangle:
            pos: self.center_x-p.btn_stop/2, self.center_y-p.btn_stop/2
            size: p.btn_stop, p.btn_stop
            radius: (p.icon_radius,)

<BtnPlay@RoundButton>:
    #:set ph (p.btn_stop-2*p.icon_radius)/2
    #:set pw ph/1.155
    enabled: app.print_state in ('pausing', 'paused')
    canvas:
        Color:
            rgba: 1,1,1,1 if self.enabled else 0
        Triangle:
            points: self.center_x-pw, self.center_y- ph,   self.center_x-pw, self.center_y+ ph,   self.center_x+pw, self.center_y
        Line:
            width: p.icon_radius
            points: self.center_x-pw, self.center_y- ph,   self.center_x-pw, self.center_y+ ph,   self.center_x+pw, self.center_y
            close: True

<BtnPause@RoundButton>:
    enabled: app.print_state == 'printing'
    canvas:
        Color:
            rgba: 1,1,1,1 if self.enabled else 0
        RoundedRectangle:
            pos: self.center_x-p.btn_stop/2, self.center_y-p.btn_stop/2
            size: 0.39*p.btn_stop,p.btn_stop
            radius: (p.icon_radius,)
        RoundedRectangle:
            pos: self.center_x+p.btn_stop/2-0.4*p.btn_stop, self.center_y-p.btn_stop/2
            size: 0.39*p.btn_stop, p.btn_stop
            radius: (p.icon_radius,)

# POPUPS

<ZAdjustPopup@BasePopup>:
    size_hint: 0.95,0.4
    title: "Calibrate Z Height"
    FloatLayout:
        UltraSlider:
            val: root.val
            buttons: [[0,0,"default", None]]
            val_min: -0.5
            val_max: 0.5
            unit: "mm"
            round_to: 2
            round_style: 5
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_z_adjust(slider.val), root.dismiss()

<PressureAdvancePopup@BasePopup>:
    size_hint: 0.95, 0.4
    title: "Set Pressure Advance"
    FloatLayout:
        UltraSlider:
            val: root.val
            buttons: []
            val_min: 0
            val_max: 0.05
            unit: "mm/mm/s"
            round_to: 3
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_pressure_advance(slider.val), root.dismiss()

<AccPopup@BasePopup>:
    title: "Set Acceleration"
    size_hint: 0.83,0.4
    FloatLayout:
        UltraSlider:
            val: root.val
            val_min: 2000
            val_max: 50000
            unit: "mm/s²"
            round_to: -2
            buttons: [[36000,0,"default",None],]
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5}
            y: btn_cancel.top+40
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_acceleration(slider.val), root.dismiss()

<SpeedPopup@BasePopup>:
    size_hint: 0.95, 0.4
    title: "Set Speed Factor"
    FloatLayout:
        UltraSlider:
            val: root.val
            buttons: [[100,0,"no multiplier",None]]
            val_min: 10
            val_max: 500
            unit: "%"
            round_to: 0
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_speed(slider.val), root.dismiss()

<FlowPopup@BasePopup>:
    size_hint: 0.95, 0.4
    title: "Set Material Flow"
    FloatLayout:
        UltraSlider:
            val: root.val
            buttons: [[100,0,"no multiplier",None]]
            val_min: 90
            val_max: 110
            unit: "%"
            round_to: 1
            round_style: 5
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_flow(slider.val), root.dismiss()

<FanPopup@BasePopup>:
    size_hint: 0.95, 0.4
    title: "Set Part Cooling"
    FloatLayout:
        UltraSlider:
            val: root.val
            buttons: [[0,0,"Off",None]]
            val_min: 0
            val_max: 100
            unit: "%"
            round_to: 0
            id: slider
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_fan(slider.val), root.dismiss()

<BedTempPopup@BasePopup>:
    size_hint: 0.95, 0.4
    title: "Set Buildplate Temperature"
    FloatLayout:
        TempSlider:
            id: slider
            tool_id: 'B'
            val: root.val['B'][0]
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_temp(slider.val, "B"), root.dismiss()

<ExtTempPopup@BasePopup>:
    size_hint: 0.95, 0.4
    title: "Set Extruder {} Temperature".format(int(self.creator.tool_id[1]) + 1)
    FloatLayout:
        TempSlider:
            val: root.val[root.creator.tool_id][0]
            id: slider
            tool_id: root.creator.tool_id
            width: root.width
            pos_hint: {'center_x':0.5, 'y':0.35}
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.send_temp(slider.val, root.creator.tool_id); root.dismiss()

 #: set o_padding 10
<FilamentChooserPopup>:
    size_hint: 0.96, 0.865
    title: "Load Material"
    #TODO check if container id was already used
    FloatLayout:
        id: container
        RectangleButton:
            on_press: root.tab_2 = False
            id: left_title
            text: "New Material"
            font_size: p.normal_font
            size_hint: None, None
            size: root.width/2, 70
            pos_hint: {'top':1, 'x':0}
            color:  p.medium_light_gray if root.tab_2 else (1,1,1,1)
            valign: 'middle'
            halign: 'center'
        RectangleButton:
            on_press: root.tab_2 = True
            id: right_title
            text: "Your Materials"
            font_size: p.normal_font
            size_hint: None, None
            size: root.width/2, 70
            pos_hint: {'top':1, 'right':1}
            color: (1,1,1,1) if root.tab_2 else p.medium_light_gray
            valign: 'middle'
            halign: 'center'
        Divider:
            width: root.width 
            pos: root.x, left_title.y
        ScrollView:
            id: scroll_view
            size_hint: None, None
            size: root.width, container.height-btn_cancel.height-left_title.height
            pos: root.x, btn_cancel.top
            StackLayout:
                id: option_stack
                size_hint_y: None
                height: self.minimum_height
                spacing: (2*o_padding,)
                padding: (30,)
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            id: btn_confirm
            enabled: False
            text: "Select"
            width: root.width/2
            pos: root.center_x, root.y
            on_release: root.confirm()

<Option>:
    size: 86, 60
    canvas.before:
        Color:
            rgba: self.option_color
        RoundedRectangle:
            size: self.width * self.amount, self.height
            pos: self.x, self.y
            radius: (p.icon_radius,)
        Color:
            rgba: (1,1,1,0.25) if self.selected else p.btn_outline
        Line:
            width: 1
            rounded_rectangle: (self.x, self.y, self.width, self.height, p.icon_radius)
        Color:
            rgba: p.translucent_white if self.selected else (0,0,0,0)
        RoundedRectangle:
            size: self.width + 2*o_padding, self.height + 2*o_padding
            pos: self.x - o_padding, self.y - o_padding
            radius: (p.radius,)

<OptionDivider>:
    #: set od_h 10
    size_hint: 1, None
    height: p.padding # is redundantly set in many places, since height can be set to 0
    actual_height: p.padding
    canvas.before:
        Color:
            rgba: p.popup
        Rectangle:
            size: self.width + 2*o_padding, p.padding
            pos: self.x - o_padding, self.y
        Color:
            rgba: p.medium_light_gray
    Label:
        size: root.width, p.padding
        pos: root.pos
        color: p.medium_light_gray
        text: "show more ..." if root.height == 0 else "show less" if root.filamentchooser.show_less[root.level] == False else ""
        text_size: self.size
        font_size: p.normal_font
        padding_y: 5
        valign: 'top'
        halign: 'center'

<FilamentPopup>:
    size_hint: 0.96, 0.5
    title: "{} {}".format(self.manufacturer, self.filament_type)
    FloatLayout:
        FilamentSlider:
            active: root.new
            id: filament_slider
            center_x: root.center_x
            y: btn_cancel.top + 90
            val: root.amount * 1000
            filament_color: root.filament_color
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            id: btn_confirm
            enabled: True
            text: "Load" if root.new else "Unload"
            width: root.width/2
            pos: root.center_x, root.y
            on_release: root.confirm()

<-FilamentSlider>:
    size_hint: None, None
    size: p.screen_width - 2*p.small_padding, 100
    px: self.x + p.padding
    canvas:
        Color:
            rgba: p.medium_gray if self.pressed else self.filament_color
        RoundedRectangle:
            size: self.width - 2*p.padding, self.height
            pos: self.x + p.padding, self.y
            radius: (p.radius,)
        Color:
            rgba: (0,0,0,0) if self.pressed else p.popup
        Rectangle:
            size: self.right - p.padding - self.px, self.height
            pos: self.px, self.y
        Color:
            rgba: (1,1,1,0.3) if self.pressed else p.btn_outline
        Line:
            width: 1
            rounded_rectangle: (self.x + p.padding, self.y, self.width - 2*p.padding, self.height, p.radius)
        Color:
            rgba: p.btn_outline if not self.active else (0,0,0,0) if self.pressed else (1,1,1,1)
        Line:
            width: 4 if self.active else 1
            points: self.px, self.y, self.px, self.top
    Label:
        id: value_label
        text: root.disp
        max_lines: 1
        size_hint: None,None
        pos_hint: None,None
        size: root.size
        pos: root.x, root.top + 50
        font_size: p.large_font + 10
        color: (1,1,1,1)
        valign: 'middle'
        halign: 'center'
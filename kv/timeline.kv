#:import Factory kivy.factory.Factory

#:import p parameters
#:import printer_cmd printer_cmd

<TimelineTab@TabbedPanelItem>:
    background_down: ''
    background_color: p.background
    canvas:
        Rectangle:
            source: p.kgui_dir + '/logos/timeline.png'
            size: dp(60*p.disp_vertical_stretch), dp(65)
            pos: dp(225 - 30*p.disp_vertical_stretch), dp(17.5)
    FloatLayout:
        pos: 0, p.tab_height
        canvas.before:
            Color:
                rgba: p.background
            Rectangle:
                size: p.screen_width, p.screen_height - p.tab_height - p.status_bar_height
                pos: 0, p.tab_height
        TitleBar:
            id: title_bar
            enabled: False
            pos_hint: {'x':0, 'top':1}
            title: "Print Job Timeline"
        Timeline:
            id: tl
            viewclass: 'TimelineItem'
            size_hint: None, None
            size: p.screen_width, p.screen_height - title_bar.height - p.tab_height - p.status_bar_height
            pos: 0, p.tab_height
        BtnPrint:
            id: btn_print
            right: p.screen_width - p.h_padding + dp(12)
            y: p.tab_height + p.padding
            on_release: Factory.PrintPopup(tl.ids.tl_box.selected_object.path).open()
            enabled: tl.ids.tl_box.selected_object != None and tl.ids.tl_box.selected_object.state in ('finished', 'aborted')
        BtnQX:
            id: q_x
            right: p.screen_width - p.h_padding + dp(12)
            y: p.tab_height + p.padding
            on_release: tl.remove()
            enabled: tl.ids.tl_box.selected_object != None and tl.ids.tl_box.selected_object.state in ("queued", "printing")
        BtnQUp:
            id: q_up
            right: q_x.x - p.h_padding  + dp(12)
            y: p.tab_height + p.padding
            on_release: tl.move(1)
            enabled: tl.ids.tl_box.selected_object != None and tl.ids.tl_box.selected_object.state == "queued"
            active: tl.ids.tl_box.selected_nodes and tl.ids.tl_box.selected_nodes[0] > 0
        BtnQDown:
            right: q_up.x - p.h_padding  + dp(12)
            y: p.tab_height + p.padding
            on_release: tl.move(-1)
            enabled: tl.ids.tl_box.selected_object != None and tl.ids.tl_box.selected_object.state == "queued"
            active: tl.ids.tl_box.selected_nodes and tl.ids.tl_box.selected_nodes[0] < len(app.jobs) - 2

<Timeline>:
    TimelineBox:
        id: tl_box
        default_size: None, None
        default_size_hint: 1, None
        size_hint_y: None
        height: self.minimum_height
        orientation: 'vertical'
        multiselect: False
        touch_multiselect: False
        touch_deselect_last: True

<TimelineItem>:
    canvas:
        Color:
            rgba: (0,0,0,0) if self.state == 'header' else (1,1,1,1) if self.thumbnail else p.medium_light_gray
        Rectangle:
            source: self.thumbnail or p.kgui_dir + "/logos/file.png"
            size: dp(80), dp(80)
            pos: p.h_padding - dp(10), self.top - dp(55 + 40)
        Color:
            rgba: p.translucent_white if (self.selected or self.pressed) else (0,0,0,0)
        Rectangle:
            size: self.width, self.height - 1
            pos: self.pos
    #Label
    text: app.print_time if self.state in ('printing', 'pausing', 'paused', 'aborting') else ""
    size_hint: 1, None
    height: dp(44) if self.state == "header" else dp(150) if self.state in ('printing', 'pausing', 'paused', 'aborting') else dp(110)
    halign: 'right'
    valign: 'bottom'
    padding: p.h_padding, dp(32)
    text_size: self.size
    font_size: p.normal_font
    color: p.medium_light_gray
    Label:
        text: "" if root.state == 'header' else root.state.capitalize()
        size_hint: None, None
        size: root.width, dp(110)
        x: root.x
        top: root.top
        halign: 'right'
        valign: 'middle'
        max_lines: 1
        padding_x: p.h_padding
        text_size: self.size
        font_size: p.normal_font
        color:
            {'finished': p.green, 'aborted': p.red, 'aborting': p.red, 'printing': (1,1,1,1), 'paused': (1,1,1,1),
            'pausing': (1,1,1,1), 'queued': p.medium_light_gray, 'header': (0,0,0,0)}[root.state]
    Label:
        text: root.name
        shorten: True
        shorten_from: 'right'
        halign: 'center' if root.state == 'header' else 'left'
        valign: 'middle'
        size_hint: None, None
        size: root.width, dp(44) if root.state == 'header' else dp(110)
        x: root.x
        top: root.top
        padding_x: 2*p.h_padding + dp(80 - 20)
        text_size: self.size
        font_size: p.normal_font
        color: p.medium_gray if root.state == 'header' else (1,1,1,1)
    Divider:
        top: root.top


# BUTTONS

#:set pad 25
#:set pad_x pad*p.disp_vertical_stretch
<BtnPrint@FloatingButton>:
    id: btn_print
    btn_color: p.accent
    canvas:
        Color:
            rgba: (1, 1, 1, 1) if self.enabled else (0,0,0,0)
        Triangle:
            points:
                self.x + dp(pad_x) + dp(4), self.y + dp(pad) - dp(4), \
                self.x + dp(pad_x) + dp(4), self.top - dp(pad) + dp(4), \
                self.right - dp(pad_x) + dp(4), self.center_y

<BtnQUp@FloatingButton>:
    id: q_up
    btn_color: p.medium_gray
    active: True
    canvas:
        Color:
            rgba: (0,0,0,0) if not self.enabled else (1,1,1,1) if self.active else p.btn_disabled
        Triangle:
            points:
                self.x + dp(pad_x) - dp(4), self.y + dp(pad) + dp(4), \
                self.right-dp(pad_x) + dp(4), self.y + dp(pad) + dp(4), \
                self.center_x, self.top - dp(pad)

<BtnQDown@FloatingButton>:
    btn_color: p.medium_gray
    active: True
    canvas:
        Color:
            rgba: (0,0,0,0) if not self.enabled else (1,1,1,1) if self.active else p.btn_disabled
        Triangle:
            points:
                self.x+dp(pad_x) - dp(4), self.top - dp(pad) - dp(4), \
                self.right-dp(pad_x) + dp(4), self.top - dp(pad) - dp(4), \
                self.center_x, self.y + dp(pad)

<BtnQX@FloatingButton>:
    btn_color: p.red
    canvas:
        Color:
            rgba: (1,1,1,1) if self.enabled else (0,0,0,0)
        Line:
            points: self.x + dp(pad_x), self.top - dp(pad),   self.right - dp(pad_x), self.y + dp(pad)
            width: dp(4)
            cap: 'round'
        Line:
            points: self.x + dp(pad_x), self.y + dp(pad),   self.right - dp(pad_x), self.top - dp(pad)
            width: dp(4)
            cap: 'round'

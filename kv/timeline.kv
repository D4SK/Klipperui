#:kivy 1.8.0

#:import p parameters
#:import printer_cmd printer_cmd

<TimelineTab@TabbedPanelItem>:
    background_down: ''
    background_color: p.background
    canvas:
        Rectangle:
            source: p.kgui_dir+'/logos/timeline.png'
            size: 60*p.disp_vertical_stretch, 65
            pos: 225-30*p.disp_vertical_stretch, 17.5
    FloatLayout:
        pos: 0, p.tab_height
        canvas.before:
            Color:
                rgba: p.background
            Rectangle:
                size: p.screen_width, p.screen_height - p.tab_height - p.status_bar_height
                pos: 0, p.tab_height
        TitleBar:
            id: title_bar
            enabled: False
            pos_hint: {'x':0, 'top':1}
            title: "Printjob Timeline"
        Timeline:
            id: tl
            viewclass: 'TimelineItem'
            size_hint: None, None
            size: p.screen_width, p.screen_height - title_bar.height - p.tab_height - p.status_bar_height
            pos: 0, p.tab_height
        BtnPrint:
            id: btn_print
            right: p.screen_width - p.h_padding + 12
            y: p.tab_height + p.padding
            on_release: Factory.PrintPopup(tl.ids.tl_box.selected_object.path).open()
            enabled: tl.ids.tl_box.selected_object != None and tl.ids.tl_box.selected_object.state in ('done', 'stopped')
        BtnQX:
            id: q_x
            right: p.screen_width - p.h_padding + 12
            y: p.tab_height + p.padding
            on_release: tl.remove()
            enabled: tl.ids.tl_box.selected_object != None and tl.ids.tl_box.selected_object.state in ("queued", "printing")
        BtnQUp:
            id: q_up
            right: q_x.x - p.h_padding  + 12
            y: p.tab_height + p.padding
            on_release: tl.move(1)
            enabled: tl.ids.tl_box.selected_object != None and tl.ids.tl_box.selected_object.state == "queued"
            active: tl.ids.tl_box.selected_nodes and tl.ids.tl_box.selected_nodes[0] > 0
        BtnQDown:
            right: q_up.x - p.h_padding  + 12
            y: p.tab_height + p.padding
            on_release: tl.move(-1)
            enabled: tl.ids.tl_box.selected_object != None and tl.ids.tl_box.selected_object.state == "queued"
            active: tl.ids.tl_box.selected_nodes and tl.ids.tl_box.selected_nodes[0] < len(app.jobs) - 2

<Timeline>:
    TimelineBox:
        id: tl_box
        default_size: None, None
        default_size_hint: 1, None
        size_hint_y: None
        height: self.minimum_height
        orientation: 'vertical'
        multiselect: False
        touch_multiselect: False
        touch_deselect_last: True

<TimelineItem>:
    canvas:
        Color:
            rgba: (0,0,0,0) if self.state in ('header', 'message') else (1,1,1,1) if self.thumbnail else p.medium_light_gray
        Rectangle:
            source: self.thumbnail or p.kgui_dir + "/logos/file.png"
            size: 80, 80
            pos: p.h_padding - 10, self.center_y - 40
        Color:
            rgba: p.translucent_white if (self.selected or self.pressed) else (0,0,0,0)
        Rectangle:
            size: self.size
            pos: self.pos
    #Label
    width: p.screen_width
    size_hint_y: None
    height: 45 if self.state == "header" else 110
    text: "" if self.state in ('header', 'message') else self.state.capitalize()
    halign: 'right'
    valign: 'middle'
    max_lines: 1
    padding_x: p.h_padding
    text_size: self.size
    font_size: p.normal_font
    bold: self.state in ('printing', 'pausing', 'paused', 'stopping')
    color: {'done':p.green, 'stopped':p.red, 'stopping':p.red, 'printing': (1,1,1,1), 'paused':(1,1,1,1), 'pausing':(1,1,1,1), 'queued':p.medium_light_gray, 'message':(0,0,0,0), 'header':(0,0,0,0)}[self.state]
    Label:
        text: root.name
        shorten: True
        shorten_from: 'right'
        halign: 'center' if root.state in ("header", "message") else 'left'
        valign: 'middle'
        size_hint: None, None
        size: p.screen_width -2*(2*p.h_padding+80-20), root.height
        center_x: root.center_x
        y: root.y
        text_size: self.size
        font_size: p.normal_font
        color: p.medium_gray if root.state in ("header", "message") else (1,1,1,1)
    Divider:
        y: root.top - 1


# BUTTONS

#:set pad 25
#:set pad_x pad*p.disp_vertical_stretch
<BtnPrint@FloatingButton>:
    id: btn_print
    btn_color: p.medium_gray
    canvas:
        Color:
            rgba: (1, 1, 1, 1) if self.enabled else (0,0,0,0)
        Triangle:
            points: self.x+pad_x+4, self.y+pad-4,  self.x+pad_x+4, self.top-pad+4,   self.right-pad_x+4, self.center_y

<BtnQUp@FloatingButton>:
    id: q_up
    btn_color: p.medium_gray
    active: True
    canvas:
        Color:
            rgba: (0,0,0,0) if not self.enabled else (1,1,1,1) if self.active else p.btn_disabled
        Triangle:
            points: self.x+pad_x-4, self.y+pad+4,  self.right-pad_x+4, self.y+pad+4,  self.center_x, self.top-pad

<BtnQDown@FloatingButton>:
    btn_color: p.medium_gray
    active: True
    canvas:
        Color:
            rgba: (0,0,0,0) if not self.enabled else (1,1,1,1) if self.active else p.btn_disabled
        Triangle:
            points: self.x+pad_x-4, self.top-pad-4,  self.right-pad_x+4, self.top-pad-4,  self.center_x, self.y+pad

<BtnQX@FloatingButton>:
    btn_color: p.red
    canvas:
        Color:
            rgba: (1,1,1,1) if self.enabled else (0,0,0,0)
        Line:
            points: self.x+pad_x, self.top-pad,  self.right-pad_x, self.y+pad
            width: 4
            cap: 'none'
        Line:
            points: self.x+pad_x, self.y+pad,  self.right-pad_x, self.top-pad
            width: 4
            cap: 'none'

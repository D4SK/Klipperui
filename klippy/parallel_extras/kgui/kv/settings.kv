#:import platform platform
#:import Factory kivy.factory.Factory
#:import screenmanager kivy.uix.screenmanager
#:import p parameters
#:import printer_cmd parallel_extras.kgui.printer_cmd

<SettingTab>:
    background_down: ''
    background_color: p.background
    canvas:
        Rectangle:
            source: p.kgui_dir+'/logos/settings.png'
            size: dp(60*p.disp_vertical_stretch), dp(60)
            pos: dp(525 - 30*p.disp_vertical_stretch), dp(20)
    FloatLayout:
        pos: 0, p.tab_height
        size: p.screen_width, p.screen_height - p.tab_height - p.status_bar_height
        size_hint: None, None
        canvas:
            Color:
                rgba: p.background
            Rectangle:
                size: p.screen_width, p.screen_height - p.tab_height - p.status_bar_height
                pos: 0, p.tab_height
        TitleBar:
            id: title_bar
            title:
                {'SettingScreen': "Settings",
                'ConsoleScreen': "Gcode Console",
                'WifiScreen': "Wifi",
                'UpdateScreen': "System Update",
                "ContinuousPrintingScreen": "Continuous Printing",
                "MoveScreen": "Move Printhead",
                "SetupScreen": "Setup"}[screen_man.current]
            pos_hint: {'x': 0, 'top': 1}
            size_hint: None, None
        BtnBack:
            pos_hint: {'x': 0, 'top': 1}
            enabled: screen_man.current != 'SettingScreen'
            on_release: screen_man.current = 'SettingScreen'
            size_hint: None, None
        BtnKebap:
            id: btn_kebap
            pos_hint: {'right': 1, 'top': 1}
            enabled: hasattr(screen_man.current_screen, 'show_dropdown')
            on_release: screen_man.current_screen.show_dropdown(self)
            size_hint: None, None
        ScreenManager:
            size: p.screen_width, p.screen_height - p.title_bar_height - p.tab_height - p.status_bar_height
            pos: 0, p.tab_height
            id: screen_man
            name: 'SettingScreenManager'
            size_hint: None, None
            transition: screenmanager.NoTransition()
            SettingScreen:
                id: setting_screen
            ConsoleScreen:
                id: console_screen
            WifiScreen:
                id: wifi_screen
            UpdateScreen:
                id: update_screen
            MoveScreen:
                id: move_screen
            ContinuousPrintingScreen:
                id: continuous_printing_screen
            SetupScreen:
                id: setup_screen

<SettingScreen@Screen>:
    name: 'SettingScreen'
    ScrollView:
        always_overscroll: False
        canvas.before:
            Color:
                rgba: p.background
            Rectangle:
                pos: self.pos
                size: self.size
        BoxLayout:
            orientation:'vertical'
            height: self.minimum_height
            pos: 0, root.height - self.height
            size_hint_y: None
            Divider:
                pos_hint: {'center_x': 0.5}
            # SetItem:
            #     left_title: "Gcode Console"
            #     on_release: root.manager.current = "ConsoleScreen"
            SetItem:
                left_title: "Move Printhead"
                enabled: app.state == "ready"
                on_release: root.manager.current = "MoveScreen"
            SetItem:
                left_title: "Continuous Printing"
                right_title: "Enabled" if app.continuous_printing else "Disabled"
                enabled: app.connected
                on_release: root.manager.current = "ContinuousPrintingScreen"
            SetItem:
                left_title: "Acceleration"
                right_title: "{:6.0f}mm/sÂ²".format(app.config_acceleration)
                enabled: app.connected
                hidden: app.variable_acceleration_control
                on_release: Factory.AccConfPopup(val=app.config_acceleration).open()
            SetItem:
                left_title: "Pressure Advance"
                right_title: "{:4.3f}s".format(app.config_pressure_advance)
                enabled: app.connected
                on_release: Factory.PressureAdvanceConfPopup(val=app.config_pressure_advance).open()
            SIWifi:
                left_title: "Wifi"
                enabled: self.network_manager.available
                on_release: root.manager.current = "WifiScreen"
            SetItem:
                left_title: "Shutdown..."
                on_release: Factory.PowerPopup().open()
            SIUpdate:
                left_title: "Update"
                on_release: root.manager.current = "UpdateScreen"
            SetItem:
                left_title: "Setup"
                on_release: root.manager.current = "SetupScreen"

<SetupScreen@Screen>:
    name: 'SetupScreen'
    ScrollView:
        always_overscroll: False
        canvas.before:
            Color:
                rgba: p.background
            Rectangle:
                pos: self.pos
                size: self.size
        BoxLayout:
            orientation:'vertical'
            height: self.minimum_height
            pos: 0, root.height - self.height
            size_hint_y: None
            Divider:
            SITimezone:
                id: si_timezone
            SetItem:
                left_title: "Change Hostname"
                right_title: platform.node()
                on_release: Factory.HostnamePopup().open()
            SetItem:
                left_title: "LED Brightness"
                height: dp(110)
                hidden: app.led_controls == None
                on_release: Factory.LedPopup(val=app.led_brightness*100).open()

<ConsoleScreen>:
    name: 'ConsoleScreen'
    canvas.before:
        Color:
            rgba: p.background
        Rectangle:
            pos: 0, 0 # screens are relative layouts
            size: self.size
    ScrollView:
        id: console_scroll
        pos: 0, console_input.top
        size_hint: 1, None
        height: root.height - console_input.top
        Label:
            id: console_label
            text: "GCODE TERMINAL\n"
            font_size: p.normal_font
            size: self.texture_size
            size_hint: 1, None
            valign: 'bottom'
            halign: 'left'
            padding_x: p.padding
            padding_y: p.padding - dp(10)
            pos_hint: {'x': 0, 'y': 0}
            color: p.medium_light_gray
    TextInput:
        id: console_input
        multiline: False
        text_validate_unfocus: False
        font_size: p.normal_font
        foreground_color: (1,1,1,1)
        padding: (15,12,25,12)
        height: self.minimum_height
        background_color: p.medium_gray
        cursor_color: (1,1,1,1)
        size_hint: None, None
        width: root.width - 2*p.padding
        pos_hint: {'center_x': 0.5}
        y: (0.34-0.02)*p.screen_height - p.tab_height + p.padding # Keyboard height is 0.34 (style.kv)

<ContinuousPrintingScreen>:
    name: "ContinuousPrintingScreen"
    canvas.before:
        Color:
            rgba: p.background
        Rectangle:
            pos: 0, 0
            size: self.size
    BoxLayout:
        id: setting_box
        orientation:'vertical'
        height: self.minimum_height
        y: root.height - self.minimum_height
        x: 0
        size_hint_y: None
        Divider:
        SIToggle:
            id: enable_toggle
            text: "Enabled" if self.active else "Disabled"
            size_hint: None, None
            on_release: root.update()
        SIToggle:
            id: reposition_toggle
            text: "Reposition Prints"
            enabled: enable_toggle.active
            size_hint: None, None
            on_release: root.update()
        SIRadio:
            text: "Exact Material Match"
            value: "exact"
            selected: app.material_condition == self.value
            enabled: enable_toggle.active
            size_hint: None, None
            on_release: app.material_condition = self.value; root.update()
        SIRadio:
            text: "Material Type Match (PLA, PETG, ...)"
            value: "type"
            selected: app.material_condition == self.value
            enabled: enable_toggle.active
            size_hint: None, None
            on_release: app.material_condition = self.value; root.update()
        SIRadio:
            text: "No Material Match required"
            value: "any"
            selected: app.material_condition == self.value
            enabled: enable_toggle.active
            size_hint: None, None
            on_release: app.material_condition = self.value; root.update()
        Divider:

<MoveScreen>:
    name: "MoveScreen"
    canvas.before:
        Color:
            rgba: p.background
        Rectangle:
            pos: 0, 0
            size: self.size
    FloatLayout:
        XyField:
            id: xy_field
            size_hint: None, None
            height: p.btn_height*4
            width: p.btn_height*4
            right: root.right - p.h_padding
            top: root.height - p.small_padding # screens are relative layouts
            enabled: app.state == "ready" and 'x' in app.homed and 'y' in app.homed
        Btn4x:
            id: btn_4x
            top: xy_field.y - p.padding
            x: xy_field.x
        RoundButton:
            id: btn_off
            on_release: app.reactor.cb(printer_cmd.send_motors_off)
            enabled: app.state == "ready"
            size: p.btn_height, p.btn_height
            right: btn_4x.right
            top: xy_field.y - p.padding
            text: "Off"
            color: (1,1,1,1) if btn_off.enabled else p.btn_disabled
            text_size: self.size
            font_size: p.large_font
            halign: 'center'
            valign: 'middle'
        RoundButton:
            on_release: app.reactor.cb(printer_cmd.run_script, "T0")
            enabled: app.state == "ready"
            size: p.btn_height, p.btn_height
            x: btn_4x.x if not app.xy_homing_controls else p.mars
            top: xy_field.y - p.padding
            text: "T0"
            text_size: self.size
            font_size: p.large_font
            halign: 'center'
            valign: 'middle'
        RoundButton:
            on_release: app.reactor.cb(printer_cmd.run_script, "T1")
            enabled: app.state == "ready"
            size: p.btn_height, p.btn_height
            x: btn_4x.x + p.btn_height if not app.xy_homing_controls else p.mars
            top: xy_field.y - p.padding
            text: "T1"
            text_size: self.size
            font_size: p.large_font
            halign: 'center'
            valign: 'middle'
        BtnHome:
            id: btn_x
            axis_id: 'X'
            size: p.btn_height, p.btn_height
            x: btn_4x.x if app.xy_homing_controls else p.mars
            y: btn_4x.y
        BtnHome:
            id: btn_y
            axis_id: 'Y'
            size: p.btn_height, p.btn_height
            x: btn_4x.x + p.btn_height if app.xy_homing_controls else p.mars
            y: btn_4x.y
        BtnHome:
            id: btn_z
            axis_id: 'Z'
            size: p.btn_height, p.btn_height
            right: btn_4x.right - p.btn_height
            y: btn_4x.y
        BoxLayout:
            id: box
            orientation: 'vertical'
            height: self.minimum_height
            size_hint_y: None
            top: xy_field.top
            x: p.padding
            spacing: 0

<CoordinateInput>:
    enabled:
        self.axis_id in app.homed \
        or (self.axis_id == 'extruder' \
        and app.temp[app.extruder_id][0] > app.min_extrude_temp \
        and app.temp[app.extruder_id][1] > app.min_extrude_temp)
    color: (1,1,1,1) if self.enabled else p.btn_disabled
    text: self.name + ("" if txt_input.focus else "{:3.2f}".format(app.pos[self.axis_idx]))
    font_size: p.normal_font + sp(5)
    text_size: self.size
    size: dp(200), p.btn_height
    size_hint: None, None
    valign: 'middle'
    halign: 'left'
    x: p.padding
    center_y: root.center_y
    TextInput:
        id: txt_input
        multiline: False
        font_size: p.normal_font + sp(5)
        x: root.x if root.enabled else p.mars
        center_y: root.center_y
        foreground_color: (1,1,1,1)
        padding: (26,20,26,20)
        height: self.minimum_height
        background_color: (0,0,0,0)
        cursor_color: (1,1,1,1)
        size_hint: None, None
        width: dp(140)
        text_validate_unfocus: True

<WifiScreen>:
    name: 'WifiScreen'
    canvas.before:
        Color:
            rgba: p.background
        Rectangle:
            pos: 0, 0 # screens are relative layouts
            size: self.size
    Wifi:
        id: wifi
        viewclass: 'WifiItem'
    Label:
        id: wifi_message
        text: wifi.message
        font_size: p.normal_font
        text_size: self.size
        size_hint: 1, 0.2
        valign: 'top'
        halign: 'left'
        padding_x: p.padding
        padding_y: p.padding - dp(10)
        pos_hint: {'x':0, 'top':1}
        color: p.medium_light_gray

<Wifi>:
    message: ""
    WifiBox:
        id: wifi_box
        default_size: None, None
        default_size_hint: 1, None
        size_hint_y: None
        width: p.screen_width
        height: self.minimum_height
        orientation: 'vertical'
        multiselect: False
        touch_multiselect: False

<WifiItem>:
    canvas:
        Color:
            rgba: p.translucent_white if self.pressed else (0,0,0,0)
        Rectangle:
            size: self.width, self.height - 1
            pos: self.pos
    #Label
    text: "" if not self.ap else "Connected" if self.ap.in_use else "Saved" if self.ap.saved else ""
    halign: 'right'
    valign: 'bottom'
    padding: p.h_padding, dp(32)
    size_hint: 1, None
    height: 1 if not self.ap else dp(150) if self.ap.in_use or self.ap.saved else dp(110)
    text_size: self.size
    font_size: p.normal_font
    color: p.medium_light_gray
    Label:
        text: "" if not root.ap else root.ap.ssid
        size_hint: None, None
        size: root.width, dp(110)
        top: root.top
        x: root.x
        halign: 'right'
        valign: 'middle'
        max_lines: 1
        padding_x: p.h_padding
        text_size: self.size
        font_size: p.normal_font
    Label:
        text: "" if not root.ap else str(root.ap.signal)
        shorten: True
        halign: 'left'
        valign: 'middle'
        padding_x: p.h_padding
        size_hint: None, None
        size: root.width, dp(110)
        top: root.top
        x: root.x
        text_size: self.size
        font_size: p.normal_font
        color: p.medium_light_gray
    Divider:
        top: root.y

<UpdateScreen>:
    name: 'UpdateScreen'
    canvas.before:
        Color:
            rgba: p.background
        Rectangle:
            pos: 0, 0
            size: self.size
    Label:
        id: message
        text: ""
        font_size: p.large_font
        size_hint: 1, None
        text_size: self.size
        size: p.screen_width, dp(90)
        halign: 'left'
        valign: 'bottom' 
        padding_x: p.padding
        pos_hint: {'x':0, 'top':1}
        color: p.light_gray
    ScrollView:
        always_overscroll: False
        size_hint: 1, None
        height: root.height - message.height
        pos_hint: {'x': 0, 'y': 0}
        do_scroll_x: False
        BoxLayout:
            id: box
            orientation: 'vertical'
            height: self.minimum_height
            size_hint_y: None

<UpdateDropDown@DropDown>:
    canvas:
        Color:
            rgba: p.drop_down
        RoundedRectangle:
            size: root.size
            pos: root.pos
            radius: (p.radius,)
    size_hint: None, None
    auto_width: False
    width: dp(300)
    MIShowAllVersions:
        width: root.width

<MIShowAllVersions>:
    title: "Show all Versions"

<XyField>:
    mm: [0, 0, 0]
    px: [0, 0]
    canvas.after:
        Color:
            rgba: p.btn_outline
        Line:
            width: 1
            rounded_rectangle: (self.x, self.y, self.width, self.height, p.radius)
        Color:
            rgba: p.btn_outline if self.pressed else (0,0,0,0)
        Line:
            width: 1
            points: self.x, self.px[1],   self.right, self.px[1]
        Line:
            width: 1
            points: self.px[0], self.y,   self.px[0], self.top
        Color:
            rgba: (1,1,1,1) if self.enabled else (0,0,0,0)
        Ellipse:
            pos: self.px[0] - self.point_radius, self.px[1] - self.point_radius
            size: (self.point_radius*2, self.point_radius*2)

<BtnHome@RoundButton>:
    size: p.btn_height, p.btn_height
    axis_id: 'Z'
    on_release: app.reactor.cb(printer_cmd.send_home, str(self.axis_id))
    enabled: app.state == "ready"
    canvas:
        Color:
            rgba: (1,1,1,1) if self.enabled else p.btn_disabled
        Rectangle:
            source: p.kgui_dir + '/logos/home_axis.png'
            size: dp(66), dp(66)
            pos: self.center_x - dp(32), self.center_y - dp(32)
    Label:
        pos: root.x, root.y - dp(2)
        text: root.axis_id
        color: p.background
        font_size: p.normal_font
        bold: True
        size: root.size
        text_size: self.size
        center_x: root.center_x
        center_y: root.center_y
        halign: 'center'
        valign: 'middle'

<Btn4x@Widget>:
    size_hint: None, None
    size: 4*p.btn_height, p.btn_height
    canvas:
        Color:
            rgba: p.btn_outline
        Line:
            width: 1
            rounded_rectangle: (self.x, self.y, self.width, self.height, p.radius)
        Line:
            points:
                self.x + p.btn_height, self.y + p.btn_divider_padding, \
                self.x + p.btn_height, self.top - p.btn_divider_padding
        Line:
            points:
                self.x + p.btn_height*2, self.y + p.btn_divider_padding, \
                self.x + p.btn_height*2, self.top - p.btn_divider_padding
        Line:
            points:
                self.x + p.btn_height*3, self.y + p.btn_divider_padding, \
                self.x + p.btn_height*3, self.top - p.btn_divider_padding

# SETITEMS

<SetItem>:
    enabled: True
    size_hint_y: None
    height: 0 if self.hidden else dp(110)
    width: p.screen_width
    # Button Label
    text: "" if root.hidden else self.left_title
    font_size: p.normal_font
    text_size: self.size
    valign: 'middle'
    halign: 'left'
    padding_x: p.padding
    color: (1,1,1,1) if self.enabled else p.medium_light_gray
    hidden: False
    Label:
        id: right_label
        text: "" if root.hidden else root.right_title
        font_size: p.normal_font
        text_size: self.size
        color: p.medium_light_gray
        size: dp(350), root.height
        size_hint: None, None
        valign: 'middle'
        halign: 'right'
        y: root.y
        right: p.screen_width
        padding_x: p.padding
    Divider:
        top: root.y
        hidden: root.hidden
        width: root.width - 2*p.small_padding
        center_x: root.center_x

<SIToggle@SetItem>:
    enabled: True
    active: False
    on_release: self.active = not self.active
    BtnToggle:
        size_hint: None, None
        center_y: root.center_y
        right: root.right - p.padding
        active: root.active
        enabled: root.enabled

<SIRadio@RectangleButton>:
    size_hint: None, None
    height: dp(78)
    width: p.screen_width
    font_size: p.normal_font
    text_size: self.size
    valign: 'middle'
    halign: 'left'
    padding_x: p.padding
    selected: False
    enabled: False
    color: (1,1,1,1) if self.enabled else p.medium_light_gray
    BtnRadio:
        size_hint: None, None
        center_y: root.center_y
        right: root.right - p.padding
        selected: root.selected
        enabled: root.enabled

<SITimezone>:
    left_title: "Timezone"
    on_release: Factory.TimezonePopup().open()

<SIRelease>:
    size_hint_y: None
    height: dp(180)
    width: p.screen_width
    # Button Label
    text: self.lower_title
    font_size: p.normal_font
    text_size: self.size
    valign: 'bottom'
    halign: 'left'
    padding_x: p.padding
    padding_y: p.padding
    color: p.medium_light_gray
    Label:
        text: root.upper_title
        font_size: p.large_font
        text_size: self.size
        color: p.light_gray
        size: dp(350), root.height
        size_hint: None, None
        valign: 'top'
        halign: 'left'
        padding_x: p.padding
        padding_y: p.padding
        pos: root.pos
    Btn:
        id: btn_install
        size: dp(145), dp(70)
        text: "Install"
        on_release: Factory.ReleasePopup(root.release).open()
        size_hint: None, None
        right: root.right - p.h_padding
        y: root.y

# POPUPS

<PasswordPopup>:
    txt_input: pwd_input
    size_hint: 0.87, 0.32
    FloatLayout:
        Label:
            text: 'Password'
            font_size: p.normal_font
            color: p.light_gray
            size: self.texture_size
            size_hint: None, None
            pos_hint: {'x': 0.07, 'y': 0.77}
        TextInput:
            id: pwd_input
            multiline: False
            password: True
            font_size: p.normal_font
            foreground_color: (1,1,1,1)
            padding: (15,12,25,12)
            height: self.minimum_height
            background_color: p.medium_gray
            cursor_color: (1,1,1,1)
            size_hint: 0.72, None
            pos_hint: {'x': 0.07, 'center_y': 0.63}
        BaseButton:
            on_press:
                pwd_input.password = not pwd_input.password
                lb_show.text = "show" if pwd_input.password else "hide"
            on_release:
                pwd_input.focus = True
            id: btn_s
            height: pwd_input.height-1
            size_hint: 0.11, None
            pos_hint: {'right': 0.93, 'center_y': 0.63}
            Label:
                id: lb_show
                size: btn_s.size
                pos: btn_s.pos
                text_size: self.size
                text: "show"
                font_size: p.normal_font
                halign: 'center'
                valign: 'middle'
                color: p.light_gray
        BtnPCancel:
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            enabled: len(pwd_input.text) >= 8
            width: root.width/2
            pos: root.center_x, root.y
            on_release: root.confirm()

<ConnectionPopup>:
    title: self.ap.ssid
    size_hint: 0.67, 0.38
    FloatLayout:
        Divider:
            size_hint: None, None
            size: btn_toggle_connect.width, 1
            pos: btn_toggle_connect.x, btn_toggle_connect.top
        RectangleButton:
            id: btn_toggle_connect
            text: 'Disconnect' if root.ap.in_use else 'Connect'
            size: btn_cancel.size
            pos: root.x, btn_delete.top
            on_release: root.toggle_connected()
        Divider:
            size_hint: None, None
            size: btn_toggle_connect.width, 1
            pos: btn_toggle_connect.pos
        RectangleButton:
            id: btn_delete
            text: 'Delete Connection'
            size: btn_cancel.size
            pos: root.x, btn_cancel.top
            on_release: root.delete()
        BtnPCancel:
            id: btn_cancel
            single: True
            width: root.width
            pos: root.pos
            on_release: root.dismiss()

<PowerPopup@BasePopup>:
    title: "Shutdown..."
    title_size: p.large_font
    size_hint: 0.67, 0.433
    FloatLayout:
        Divider:
            width: root.width
            pos: btn_restart.x, btn_restart.top
        RectangleButton:
            id: btn_restart
            text: "Restart"
            size: btn_poweroff.size
            pos: btn_poweroff.x, btn_reboot.top
            on_release: app.reactor.cb(printer_cmd.firmware_restart)
        Divider:
            width: root.width
            pos: btn_reboot.pos
        RectangleButton:
            id: btn_reboot
            text: "System Reboot"
            size: btn_poweroff.size
            pos: btn_poweroff.x, btn_poweroff.top
            on_release: app.reboot()
        Divider:
            width: root.width
            pos: btn_restart.pos
        RectangleButton:
            id: btn_poweroff
            text: "Shutdown"
            size_hint: 1, None
            height: btn_cancel.height
            pos: root.x, btn_cancel.top
            on_release: app.poweroff()
        BtnPCancel:
            id: btn_cancel
            single: True
            width: root.width
            pos: root.pos
            on_release: root.dismiss()

<TimezonePopup>:
    size_hint: 0.94, 0.7
    title: "Choose Region"
    FloatLayout:
        id: maincontainer
        TimezoneRV:
            id: rv
            viewclass: 'TimezoneRVItem'
            size_hint: None, None
            size: root.width, maincontainer.height-btn_cancel.height
            pos: root.x, btn_cancel.top
            TimezoneRVBox:
                id: rv_box
                default_size: None, dp(70)
                default_size_hint: 1, None
                size_hint_y: None
                height: self.minimum_height
                orientation: 'vertical'
                multiselect: False
                touch_multiselect: False
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            enabled: bool(rv_box.selected_nodes)
            id: btn_confirm
            title: "Confirm"
            width: root.width/2
            pos: root.center_x, root.y
            on_release: root.confirm()

<TimezoneRVItem>:
    # Draw a background to indicate selection
    canvas:
        Color:
            rgba: p.translucent_white if self.selected else (0,0,0,0)
        Rectangle:
            size: self.size
            pos: self.pos
    size_hint: None, None
    padding_x: p.h_padding
    font_size: p.normal_font
    text_size: self.size
    color: (1,1,1,1)
    valign: 'middle'
    halign: 'left'

<LedPopup@BasePopup>:
    title: "LED Brightness"
    size_hint: 0.94, 0.4
    FloatLayout:
        UltraSlider:
            val: root.val
            val_min: 0
            val_max: 100
            unit: "%"
            round_to: 0
            buttons: [[0,0,"off",None]]
            id: slider
            pos_hint: {'center_x':0.5, 'y':0.6}
            on_val: app.set_led_brightness(slider.val/100)
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.reactor.cb(printer_cmd.set_config, f"output_pin {app.led_controls}", "value", slider.val/100), root.dismiss()

<AccConfPopup@BasePopup>:
    title: "Configure default Acceleration"
    size_hint: 0.94, 0.4
    FloatLayout:
        UltraSlider:
            val: root.val
            val_min: 2000
            val_max: 50000
            unit: "mm/sÂ²"
            round_to: -2
            buttons: []
            id: slider
            pos_hint: {'center_x':0.5, 'y':0.6}
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            text: "Set and restart"
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.reactor.cb(printer_cmd.write_config, 'printer', 'max_accel', slider.val), root.dismiss()

<PressureAdvanceConfPopup@BasePopup>:
    size_hint: 0.94, 0.4
    title: "Configure default Pressure Advance"
    FloatLayout:
        UltraSlider:
            val: root.val
            buttons: []
            val_min: 0
            val_max: 0.05
            unit: "mm/mm/s"
            round_to: 3
            id: slider
            pos_hint: {'center_x': 0.5, 'y': 0.6}
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            text: "Set and restart"
            enabled: slider.changed
            width: root.width/2
            pos: root.center_x, root.y
            on_release: app.reactor.cb(printer_cmd.write_pressure_advance, slider.val, app.extruder_count), root.dismiss()

<ReleasePopup>:
    size_hint: 0.94, 0.68
    title: self.release['tag_name']
    FloatLayout:
        id: f_layout
        ScrollView:
            id: scroll_view
            size_hint: 1, None
            pos_hint: {'x': 0}
            top: root.top - dp(80)
            height: root.height - btn_cancel.height - dp(80)
            do_scroll_x: False
            Label:
                text: "Kgui works on most touchscreens compatible with the raspberry pi. It is fully written in Python enabling direct and fast communication with all aspects of Klipper. \n This plugin works best in conjunction with the klipper_cura_connection plugin. A modified version of klipper is used, so other web-interfaces may have limited compatibility.FeaturesA print job history, to easily find and reprint past print jobs"# root.release['name']  + "\n \n" + root.release['body']
                halign: 'left'
                valign: 'top'
                size_hint: None, None
                width: root.width
                padding_x: p.padding
                height: self.texture_size[1]
                center_x: root.center_x
                text_width: self.width
                font_size: p.normal_font
                color: p.medium_light_gray
                multiline: True
                shorten_from: 'right'
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            id: btn_update
            text: "Install"
            enabled: True
            width: root.width/2
            pos: btn_cancel.right, root.y
            on_release: Factory.DownloadPopup(root.release).open(), root.dismiss()

<DownloadPopup>:
    size_hint: 0.94, 0.68
    title: "Downloading"
    FloatLayout:
        id: f_layout
        canvas:
            Color:
                rgba: p.medium_gray
            RoundedRectangle:
                size: self.width - 2*p.padding, 10
                pos: self.x + p.padding, self.center_y
                radius: (4,)
            Color:
                rgba: p.light_gray
            RoundedRectangle:
                size: (self.width - 2*p.padding)*root.updater.downloaded_bytes/float(root.updater.total_bytes), 10
                pos: self.x + p.padding, self.center_y
                radius: (5,)
        Label:
            text: root.release['tag_name']
            halign: 'center'
            valign: 'middle'
            max_lines: 5
            size_hint: 0.8, None
            pos_hint: {'center_x': 0.5, 'center_y': 0.8}
            text_size: self.size
            font_size: p.large_font
            color: p.light_gray
        Label:
            text: "{}/{}kb".format(root.updater.downloaded_bytes/1024, root.updater.total_bytes/1024)
            size_hint: None, None
            size: root.width, p.normal_font
            top: f_layout.center_y - 5
            x: root.x + p.padding
            valign: 'top'
            font_size: p.normal_font
            color: p.light_gray
            text_size: self.size
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss(); root.updater.abort_download = True
        BtnPConfirm:
            id: confirm
            text: "Install"
            enabled: root.updater.download_finished
            width: root.width/2
            pos: root.center_x, root.y
            on_release: Factory.InstallPopup(root.release).open(), root.dismiss()

<InstallPopup>:
    size_hint: 0.94, 0.68
    title: "Install"
    auto_dismiss: False
    FloatLayout:
        id: content
        ScrollView:
            id: output_scroll
            size_hint: 1, None
            pos_hint: {'x': 0}
            y: btn_abort.top
            height: content.height - btn_abort.height
            do_scroll_x: False
            Label:
                id: output_label
                markup: True
                halign: 'left'
                valign: 'top'
                padding: p.small_padding, p.small_padding
                text_size: output_scroll.width, None
                size_hint_y: None
                width: output_scroll.width
                pos: output_scroll.pos
                height: self.texture_size[1]
                font_size: p.small_font
                color: p.light_gray
        BtnPCancel:
            id: btn_abort
            text: "Abort"
            width: root.width
            pos: root.pos
            on_release: root.terminate()
        BtnPCancel:
            id: btn_cancel
            text: "Reboot later"
            width: root.width/2
            pos: root.x, p.mars
            on_release: root.dismiss()
        BtnPConfirm:
            id: btn_reboot
            enabled: True
            text: "Reboot now"
            width: root.width/2
            pos: btn_cancel.right, p.mars
            on_release: app.reboot()

<HostnamePopup>:
    txt_input: hostname_input
    size_hint: 0.87, 0.32
    title: "Change Hostname"
    FloatLayout:
        HostnameTextInput:
            id: hostname_input
            multiline: False
            font_size: p.normal_font
            foreground_color: (1,1,1,1)
            padding: (15,12,25,12)
            height: self.minimum_height
            background_color: p.medium_gray
            cursor_color: (1,1,1,1)
            size_hint: 0.8, None
            pos_hint: {'center_x': 0.5, 'center_y': 0.63}
        BtnPCancel:
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            text: "Set and restart"
            enabled: len(hostname_input.text) >= 1
            width: root.width/2
            pos: root.center_x, root.y
            on_release: root.confirm()

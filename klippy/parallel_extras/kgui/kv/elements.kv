#:import Factory kivy.factory.Factory
#:import basename os.path.basename

#:import p parallel_extras.kgui.parameters
#:import printer_cmd parallel_extras.kgui.printer_cmd

# Read before the main kv files, used to define custom base widget rules

# BUTTONS

<BaseButton>:
    size_hint: None, None
    text: ""
    color: (1,1,1,1) if root.enabled else p.btn_disabled
    text_size: self.size
    pos: root.pos
    font_size: p.normal_font
    valign: 'middle'
    halign: 'center'

<RoundButton>:
    canvas.after:
        Color:
            rgba: p.translucent_white if self.pressed and self.enabled else (0,0,0,0)
        RoundedRectangle:
            radius: (p.radius,)
            size: self.size
            pos: self.pos

<RectangleButton>:
    canvas:
        Color:
            rgba: p.translucent_white if self.pressed and self.enabled else (0,0,0,0)
        Rectangle:
            size: self.width, self.height - 1
            pos: self.pos

<FloatingButton@BaseButton>:
    btn_color: (0,0,0,0)
    size: dp(78) * p.disp_vertical_stretch, dp(78)
    bold: True
    halign: 'center'
    valign: 'middle'
    text_size: self.size
    font_size: p.normal_font
    color: (1,1,1,1)
    canvas.before:
        Color:
            rgba: p.floating_button_shadow if self.enabled else (0,0,0,0)
        BorderImage:
            source: p.kgui_dir + '/logos/shadow.png'
            pos: self.x - dp(30), self.y - dp(30)
            size: self.width + dp(60), self.height + dp(60)
            border: (30, 30, 30, 30)
        Color:
            rgba: self.btn_color if self.enabled else (0,0,0,0)
        Ellipse:
            size: self.size
            pos: self.pos
        Color:
            rgba: p.translucent_white if self.pressed else (0,0,0,0)
        Ellipse:
            size: self.size
            pos: self.pos

<Btn@RoundButton>:
    canvas:
        Color:
            rgba: p.btn
        RoundedRectangle:
            radius: (p.radius,)
            pos: self.pos
            size: self.size

<BtnToggle@Widget>:
    width: wdt - 2*rad + 2*Rad
    enabled: True
    active: False
    canvas:
        Color:
            rgba: p.btn if not self.enabled else p.medium_gray
        #: set wdt 60
        #: set rad 11
        #: set Rad 16
        RoundedRectangle:
            size: dp(wdt), dp(rad*2)
            pos: int(self.center_x - dp(wdt/2)), self.center_y - dp(rad)
            radius: (dp(rad),)
        Color:
            rgba: p.medium_gray if not self.enabled else (1,1,1,1) if self.active else p.light_gray
        Ellipse:
            size: dp(Rad*2), dp(Rad*2)
            pos: self.right - 2*Rad if self.active else self.x , self.center_y - dp(Rad)

<BtnRadio@Widget>:
    selected: False
    enabled: True
    size_hint: None, None
    size: dp(50), dp(50)
    canvas:
        Color:
            rgba: p.btn_outline
        Line:
            width: 1
            ellipse: self.x + dp(7), self.y + dp(7),   self.width - dp(14), self.height - dp(14)
        Color:
            rgba: (0,0,0,0) if not self.selected else (1,1,1,1) if self.enabled else p.medium_gray
        Ellipse:
            pos: self.x + dp(13), self.y + dp(13)
            size: self.width - dp(26), self.height - dp(26)

<BtnOutline@RoundButton>:
    canvas.before:
        Color:
            rgba: p.btn_outline
        Line:
            rounded_rectangle: (self.x, self.y, self.width, self.height, p.radius)
            width: 1

<BtnPCancel@BaseButton>:
    text: "Cancel"
    single: False
    height: dp(74)
    canvas:
        Color:
            rgba: p.divider
        Line:
            points: self.x, self.top, self.right, self.top
        Color:
            rgba: p.translucent_white if self.pressed else (0,0,0,0)
        RoundedRectangle:
            radius:(0,0,p.radius,p.popup_radius) if self.single else (0,0,0, p.popup_radius)
            pos: self.pos
            size: self.size

<BtnPConfirm@BaseButton>:
    text: "Confirm"
    height: dp(74)
    enabled: False
    canvas:
        Color:
            rgba: p.divider
        Line:
            points: self.x, self.y, self.x, self.top, self.right, self.top
        Color:
            rgba: p.translucent_white if self.pressed else (0,0,0,0)
        RoundedRectangle:
            radius: (0,0,p.radius,0)
            pos: self.pos
            size: self.size

<BtnSlider>:
    #:set t 9  # half of width
    #:set j 15
    x: self.px-self.width/2-self.offset
    size: dp(68), dp(60)
    size_hint: None,None
    active: False
    canvas:
        Color:
            rgba: p.medium_gray if self.active else p.dark_gray
        RoundedRectangle:
            radius: (p.radius,)
            size: self.size
            pos: self.pos
        Triangle:
            points:
                (self.x + self.width/2 + self.offset, self.top + dp(j), \
                self.x + self.width/2 + dp(t) + self.offset, self.top, \
                self.x + self.width/2 - dp(t) + self.offset, self.top) \
                if 2*abs(self.offset) != self.width else \
                (self.x + self.width/2 + self.offset, self.top + dp(j), \
                self.x + self.width/2 + self.offset, self.top - dp(10), \
                self.x + self.width/2 + self.offset - (self.offset/abs(self.offset))*j, self.top)
    Label:
        markup: True
        text: root.s_title
        size: root.size
        text_size: self.size
        pos: root.pos
        font_size: p.extra_small_font
        valign: 'middle'
        halign: 'center'

<UltraSlider>:
    size_hint: None, None
    size: self.parent.width - 2*p.padding, dp(20)
    px: self.x
    canvas:
        Color:
            rgba: p.medium_gray if self.pressed else p.btn
        RoundedRectangle:
            radius: (dp(4),)
            size: self.width, dp(8)
            pos: self.x, self.center_y - dp(4)
        Color:
            rgba: p.light_gray if self.pressed else p.medium_gray
        RoundedRectangle:
            radius: (4,)
            size: self.px - self.x + 1, dp(8)
            pos: self.x, self.center_y - dp(4)
        Color:
            rgba: (1,1,1,1) if self.initialized else (0,0,0,0)
        Ellipse:
            size: dp(20), dp(20)
            pos: self.px - dp(10), self.center_y - dp(10)
    Label:
        id: value_label
        text: root.disp
        max_lines: 1
        size_hint: None,None
        pos_hint: None,None
        size: root.width, p.large_font
        font_size: p.large_font
        y: root.top + dp(35)
        center_x: root.center_x
        color: p.light_gray
        valign: 'middle'
        halign: 'center'


# MISC

<TitleBar@Label>:
    size: p.screen_width, p.title_bar_height
    title: ""
    size_hint: None, None
    Label:
        text: root.title
        shorten: True
        shorten_from: 'left'
        halign: 'center'
        valign: 'middle'
        max_lines: 1
        size_hint: None, None
        size: p.screen_width - dp(200), root.height
        center_x: p.screen_width/2
        y: root.y
        text_size: self.size
        font_size: p.large_font
        color: (1,1,1,1)

<BtnBack@RectangleButton>:
    #: set q 26
    size: dp(150), p.title_bar_height
    size_hint: None, None
    canvas:
        Color:
            rgba: (1,1,1,1) if self.enabled else (0,0,0,0)
        Triangle:
            points:
                p.h_padding, self.center_y, \
                p.h_padding + dp(q), self.center_y - dp(q), \
                p.h_padding + dp(q), self.center_y + dp(q)

<BtnKebap@RectangleButton>:
    #: set c_rad 4.5
    #: set c_dist 16.5
    size: p.title_bar_height, p.title_bar_height
    size_hint: None, None
    canvas:
        Color:
            rgba: (1,1,1,1) if self.enabled else (0,0,0,0)
        Ellipse:
            pos: self.center_x - dp(c_rad),   self.center_y - dp(c_rad) - dp(c_dist)
            size: dp(c_rad)*2, dp(c_rad)*2
        Ellipse:
            pos: self.center_x - dp(c_rad),   self.center_y - dp(c_rad) + dp(c_dist)
            size: dp(c_rad)*2*p.disp_vertical_stretch, dp(c_rad)*2
        Ellipse:
            pos: self.center_x - dp(c_rad),   self.center_y - dp(c_rad)
            size: dp(c_rad)*2*p.disp_vertical_stretch, dp(c_rad)*2

<CheckboxIcon@Widget>:
    active: False
    size_hint: None, None
    size: 36, 35
    canvas.before:
        Color:
            rgba: p.btn_outline
        Line:
            width: 1
            rounded_rectangle: (self.x, self.y, self.width, self.height, p.checkbox_radius)
        Color:
            rgba: p.medium_gray if self.active else (0,0,0,0)
        RoundedRectangle:
            radius: (p.checkbox_radius/2,)
            pos: self.x + 5, self.y + 5
            size: self.width - 10, self.height - 10
        Color:
            rgba: (0,0,0,0.3) if self.active else (0,0,0,0)
        Line:
            width: 2
            points: self.center_x -9, self.center_y,     self.center_x-2.5, self.center_y -7,     self.center_x + 9, self.center_y + 6

<MenuItem>:
    halign: 'left'
    padding: dp(40), 0
    width: dp(200)
    height: dp(80)

<MICheckbox>:
    title: ""
    CheckboxIcon:
        center_y: root.center_y
        center_x: root.x + dp(40)
        active: root.active
    Label:
        size_hint: None, None
        text: root.title
        color: (1,1,1,1) if root.enabled else p.btn_disabled
        y: root.y
        x: root.x + root.height - dp(5)
        size: root.width - root.height - dp(30), root.height
        font_size: p.normal_font
        text_size: self.size
        valign: 'middle'
        halign: 'left'
        max_lines: 2
        shorten_from: "left"

<BasePopup>:
    title_size: p.large_font
    title_align: 'center'
    background_color: (0.03,0.03,0.03,0.56) # reduces background darkening from 0.7
    size_hint: 0.67, 0.3
    pos_hint: {'center_y': 0.5, 'center_x':0.5}

<Divider>:
    size_hint: None, None
    height: 1
    hidden: False
    width: p.screen_width - 2*p.small_padding
    x: p.small_padding
    canvas:
        Color:
            rgba: (0,0,0,0) if self.hidden else p.divider
        Rectangle:
            pos: self.pos
            size: self.width, 1

<CriticalErrorPopup>:
    size_hint: 0.9, 0.68
    error: True
    message: "--"
    title: "Error - Firmware stopped"
    FloatLayout:
        id: content
        ScrollView:
            id: message_scroll
            size_hint: 1, None
            height: content.height - btn_cancel.height
            pos: content.x, btn_cancel.top
            do_scroll_x: False
            Label:
                text: root.message
                halign: 'left'
                valign: 'top'
                padding: p.small_padding, p.small_padding
                size_hint_y: None
                text_size: self.width, None
                height: self.texture_size[1]
                font_size: p.normal_font - 2
                color: p.light_gray
        BtnPCancel:
            id: btn_cancel
            text: "Restart Printer"
            width: root.width
            pos: root.pos
            on_release: app.reactor.cb(printer_cmd.firmware_restart)

<ErrorPopup>:
    size_hint: 0.75, 0.55
    error: True
    message: "--"
    title: "Error"
    FloatLayout:
        Label:
            text: root.message
            halign: 'center'
            valign: 'middle'
            max_lines: 20
            size_hint: 0.9, 1
            pos_hint: {'center_x': 0.5, 'center_y': 0.5 + 0.1}
            text_size: self.size
            font_size: p.normal_font + sp(2)
            color: p.light_gray
        BtnPCancel:
            id: btn_cancel
            text: "Ok"
            width: root.width
            pos: root.pos
            on_release: root.dismiss()

<StopPopup>:
    title: 'Stop'
    title_size: p.large_font
    size_hint: 0.8, 0.3
    FloatLayout:
        Label:
            text: app.print_title
            halign: 'center'
            valign: 'middle'
            max_lines: 2
            size_hint: 0.9, 0.5
            pos_hint: {'center_x': 0.5, 'center_y': 0.5 + 0.2}
            text_size: self.size
            font_size: p.large_font
            color: p.light_gray
        BtnPCancel:
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            enabled: True
            width: root.width/2
            pos: root.center_x, root.y
            on_release: root.dismiss(); app.reactor.cb(printer_cmd.send_stop)

<PrintPopup>:
    title: basename(root.path)
    title_size: p.large_font
    size_hint: 0.9, 0.68
    FloatLayout:
        Widget:
            id: thumbnail
            canvas:
                Color:
                    rgba: (1, 1, 1, 1) if root.md.get_thumbnail_path() else p.medium_gray
                Rectangle:
                    source: root.md.get_thumbnail_path() or p.kgui_dir + "/logos/file.png"
                    size: self.size
                    pos: self.pos
            size_hint: None, 0.25
            width: self.height
            pos_hint: {'center_x': 0.5, 'top': 0.95}
        StateText:
            x: root.x + 2*p.padding
            top: root.top - dp(170)
            size: root.width - 3*p.padding, self.texture_size[1]
            id: state_text
            state: 'green'
        StateText:
            x: root.x + 2*p.padding
            top: state_text.y
            size: root.width - 3*p.padding, root.height
            id: print_time
            state: 'info'
        BoxLayout:
            x: root.x + p.padding
            size_hint: None, None
            height: self.minimum_height
            orientation: 'vertical'
            id: settings_box
            spacing: p.padding
            center_y: 2*p.mars
            width: dp(250)
        Label:
            id: materials_label
            text: "Currently loaded"
            x: material_box.x
            y: material_box.top + dp(8)
            font_size: p.normal_font
            color: p.translucent_white
        BoxLayout:
            canvas:
                Color:
                    rgba: p.translucent_white
                RoundedRectangle:
                    radius: (p.popup_radius,)
                    pos: self.x - p.padding/2, self.y - p.padding/2
                    size: self.width + p.padding, self.height + p.padding
            right: root.right - p.padding
            size_hint: None, None
            height: self.minimum_height
            orientation: 'vertical'
            id: material_box
            spacing: p.padding
            center_y: 2*p.mars
            width: dp(250)
        BtnPCancel:
            id: btn_cancel
            width: root.width/3
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            id: btn_del
            text: 'Delete'
            enabled: app.state == "ready"
            width: root.width/3
            pos: btn_cancel.right, root.y
            on_release: Factory.DeletePopup(path = root.path, filechooser=root.filechooser).open(); root.dismiss()
        BtnPConfirm:
            text: 'Print'
            enabled: app.state == "ready"
            width: root.width/3
            pos: btn_del.right, root.y
            on_release: root.confirm()

<PrintPopupDetail>:  # @Label
    text_size: self.width, None
    size_hint: None, None
    width: dp(350)
    height: self.texture_size[1]
    halign: 'right'
    valign: 'top'
    padding: 5, 5
    text: self.value
    font_size: p.normal_font
    Label:
        id: key
        size: root.size
        pos: root.pos
        text_size: self.size
        halign: 'left'
        valign: 'top'
        padding: root.padding
        text: root.key
        color: p.medium_gray
        font_size: root.font_size

<DeletePopup>:
    title: 'Delete'
    title_size: p.large_font
    size_hint: 0.8, 0.3
    FloatLayout:
        Label:
            text: basename(root.path)
            halign: 'center'
            valign: 'middle'
            max_lines: 2
            size_hint: 0.9, 0.5
            pos_hint: {'center_x': 0.5, 'center_y': 0.5 + 0.2}
            text_size: self.size
            font_size: p.large_font
            color: p.light_gray
        BtnPCancel:
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            text: 'Delete'
            width: root.width/2
            enabled: True
            pos: root.center_x, root.y
            on_release: root.confirm()

<MaterialMismatchPopup>:
    size_hint: 0.92, 0.54
    FloatLayout:
        BoxLayout:
            x: root.x + p.padding
            size_hint: None, None
            height: self.minimum_height
            orientation: 'vertical'
            id: settings_box
            spacing: p.padding
            center_y: 2*p.mars
            width: dp(250)
        Label:
            id: materials_label
            text: "Currently loaded"
            x: material_box.x
            y: material_box.top + dp(8)
            font_size: p.normal_font
            color: p.translucent_white
        BoxLayout:
            canvas:
                Color:
                    rgba: p.translucent_white
                RoundedRectangle:
                    radius: (p.popup_radius,)
                    pos: self.x - p.padding/2, self.y - p.padding/2
                    size: self.width + p.padding, self.height + p.padding
            right: root.right - p.padding
            size_hint: None, None
            height: self.minimum_height
            orientation: 'vertical'
            id: material_box
            spacing: p.padding
            center_y: 2*p.mars
            width: dp(450)
        BtnPConfirm:
            enabled: True
            text: "Ok"
            width: root.width
            pos: root.pos
            on_release: root.dismiss()

<PrintMaterial>:
    size_hint: None, None
    size: dp(200), dp(60)
    # needed_material can be None if extruder count doesn't match
    text: f"{root.material.amount:.0f}g {root.material.type}" if root.material else ""
    font_size: p.normal_font
    valign: 'middle'
    halign: 'center'
    color: (1,1,1,1) if root.problems else p.light_gray
    canvas.before:
        Color:
            rgba: printer_cmd.calculate_filament_color(printer_cmd.hex_to_rgba(self.material.color))
        RoundedRectangle:
            size: self.width*self.material.amount/1000, self.height
            pos: self.x, self.y
            radius:
                ([p.radius] +
                ([0, 0] if self.width*self.material.amount/1000 < self.width - p.radius else [p.radius, p.radius]) +
                [p.radius])
    Label:
        size: root.size
        pos: root.right, root.y
        text: "<" if root.problems & Problem.AMOUNT else "≠" if root.problems else ""
        text_size: self.size
        font_size: p.large_font + sp(6)
        valign: 'middle'
        halign: 'left'
        size_hint: None, None

<StateText>:
    canvas:
        Color:
            rgba: {'bullet': self.color, 'info': p.medium_gray, 'red_x': p.red, 'red': p.red, 'yellow': p.yellow, 'green': p.green, 'transparent': (0,0,0,0)}[self.state]
        Rectangle:
            source: p.kgui_dir + {'bullet': '/logos/bullet.png', 'info': '/logos/info.png', 'red_x': '/logos/x.png', 'red': '/logos/warning.png', 'yellow': '/logos/warning.png', 'green': '/logos/checkmark.png', 'transparent': '/logos/transparent.png'}[self.state]
            size: dp(30*p.disp_vertical_stretch), dp(30)
            pos: self.x - dp(47), self.top - dp(29) - self.padding[1]
    height: self.texture_size[1]
    size_hint: None, None
    text_size: self.width, None
    font_size: p.normal_font - dp(1)
    halign: 'left'
    valign: 'top'
    multiline: True
    line_height: 1.16
    padding: 0, dp(9)

<BtnMaterial>:
    size_hint: None, None
    size: p.btn_width, p.btn_height
    enabled: app.state == "ready" and app.material
    filament_amount: self.material['amount']
    filament_color: printer_cmd.calculate_filament_color(printer_cmd.hex_to_rgba(self.material['hex_color']))
    color: (1,1,1,1) if self.enabled else p.btn_disabled
    text_size: self.size
    font_size: p.normal_font
    halign: 'center'
    valign: 'middle'
    padding: 0, dp(8)
    text:
        {'loading': "Loading...",
        'unloading': "Unloading...",
        'loaded': f"{self.material['amount']*1000:3.0f}g {self.material['material_type']}\n(unload)",
        'no material': "Load Material"}[self.material['state']]
    on_release:
        Factory.FilamentChooserPopup(root.extruder_id).open() if root.material['state'] == "no material" else \
        Factory.FilamentPopup(root.extruder_id, False, root.material).open() if root.material['state'] == 'loaded' else None
    canvas.before:
        Color:
            rgba: self.filament_color
        RoundedRectangle:
            size: max(0, self.width*self.filament_amount), self.height
            pos: self.pos
            radius:
                [p.radius, \
                max(0, p.radius - self.width + self.width*self.filament_amount), \
                max(0, p.radius - self.width + self.width*self.filament_amount), \
                p.radius]
        Color:
            rgba: p.btn_outline
        Line:
            width: 1
            rounded_rectangle: (self.x, self.y, self.width, self.height, p.radius)
        Color:
            rgba: p.btn_outline if self.filament_amount > 0 else (0,0,0,0)
        Line:
            points:
                self.x + self.filament_amount * self.width, self.y + p.btn_divider_padding, \
                self.x + self.filament_amount * self.width, self.top - p.btn_divider_padding

<WarningPopup>:
    size_hint: 0.9, 0.4
    message: "Are you sure you want to proceed, the ongoing Print Jobs will be aborted"
    title: ''
    FloatLayout:
        canvas:
            Color:
                rgba: p.red
            Rectangle:
                source: p.kgui_dir+'/logos/warning.png'
                size: dp(60*p.disp_vertical_stretch), dp(60)
                pos: root.x + p.padding, root.center_y
        Label:
            text: root.message
            halign: 'center'
            valign: 'middle'
            size_hint: None, None
            size: root.width - 2*p.padding - dp(30) - dp(60), root.height
            center_y: root.center_y
            x: root.x + p.padding + dp(30) + dp(60)
            text_size: self.size
            font_size: p.large_font
        BtnPCancel:
            id: btn_cancel
            width: root.width/2
            pos: root.pos
            on_release: root.dismiss()
        BtnPConfirm:
            id: btn_confirm
            enabled: True
            text: "Ok"
            width: root.width/2
            pos: root.center_x, root.y
            on_release: root.dismiss(), root.confirm_callback()
